<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs – docker</title><link>/tags/docker/</link><description>Recent content in docker on Docs</description><generator>Hugo -- gohugo.io</generator><atom:link href="/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>User-Guide: LocalStack Docker Extension</title><link>/user-guide/tools/localstack-docker-extension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/tools/localstack-docker-extension/</guid><description>
&lt;p>The LocalStack Extension for Docker Desktop enables developers working with LocalStack to operate their LocalStack container via Docker Desktop, including checking service status, container logs, and configuring profiles. To install the LocalStack Extension for Docker Desktop, you need to have &lt;a href="https://www.docker.com/products/docker-desktop">Docker Desktop installed on your machine&lt;/a>.&lt;/p>
&lt;img src="localstack-docker-extension.png" alt="LocalStack Extension for Docker Desktop" title="LocalStack Extension for Docker Desktop" width="900" />
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>To utilize LocalStack&amp;rsquo;s Docker Extension, it is necessary to have a recent version of Docker Desktop (v4.8 or higher) installed on the local machine. To enable the extension, access the &lt;strong>Preferences&lt;/strong> tab and select the &lt;strong>Enable Docker Extensions&lt;/strong> option within the &lt;strong>Extensions&lt;/strong> tab.&lt;/p>
&lt;img src="localstack-docker-extension-preferences.png" title="Enable Docker Extensions in the Preferences within the Extensions tab" width="900" />
&lt;br>&lt;/br>
&lt;p>The LocalStack Extension for Docker Desktop has been validated and can be accessed on the Extensions Marketplace. To begin using it, navigate to the &lt;strong>Extensions Marketplace&lt;/strong>, search for &lt;strong>LocalStack&lt;/strong>, and click the &lt;strong>Install&lt;/strong> button to proceed with the installation.&lt;/p>
&lt;img src="localstack-docker-extension-marketplace.png" title="Discover the LocalStack Extension on the Docker Desktop Marketplace and install it!" width="900" />
&lt;br>&lt;/br>
&lt;p>An alternative method for installing the LocalStack&amp;rsquo;s Extension for Docker Desktop is pulling the &lt;a href="https://hub.docker.com/r/localstack/localstack-docker-desktop">public Docker image&lt;/a> from Docker Hub and installing it!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>docker extension install localstack/localstack-docker-desktop:0.3.1&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>After installation, you can access the LocalStack Extension for Docker Desktop from the &lt;strong>Extensions&lt;/strong> tab. Upon the initial launch of the extension, a prompt to select a mount point for the LocalStack container will appear. Select your username from the drop-down menu. Furthermore, you can modify this setting later by navigating to the &lt;strong>Configurations&lt;/strong> tab and choosing a different mount point.&lt;/p>
&lt;img src="localstack-docker-extension-mount-point.png" title="Select the mount point upon the launch of LocalStack's Docker extension" width="900" />
&lt;h2 id="features">Features&lt;/h2>
&lt;p>LocalStack&amp;rsquo;s Docker Extension helps users to manage their LocalStack container with a simple and intuitive user interface through Docker Desktop. The extension includes container management, configuration profile management, service status, and container logs!&lt;/p>
&lt;h3 id="control-localstack">Control LocalStack&lt;/h3>
&lt;p>You can start, stop, and restart LocalStack from the Docker Desktop. You can also see the current status of your LocalStack container and navigate to LocalStack Web Application.&lt;/p>
&lt;img src="localstack-docker-extension-start.png" title="Start and Stop your LocalStack container with a single click of a button with LocalStack's extension" width="900" />
&lt;h3 id="localstack-insights">LocalStack insights&lt;/h3>
&lt;p>You can see the log information of the LocalStack container and all the available services and their status on the service page.&lt;/p>
&lt;img src="localstack-docker-extension-logs.png" title="Check the logs of your running LocalStack container through LocalStack's Docker extension" width="900" />
&lt;h3 id="localstack-configurations">LocalStack configurations&lt;/h3>
&lt;p>You can manage and use your profiles via configurations and create new configurations for your LocalStack container.&lt;/p>
&lt;img src="localstack-docker-extension-configuration-profile.png" title="Create your configuration profiles within LocalStack's Extension to affect the state of LocalStack" width="900" /></description></item><item><title>References: Podman</title><link>/references/podman/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/podman/</guid><description>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>By default, the LocalStack CLI starts the LocalStack runtime inside a Docker container.
Docker may not be available on your system, and a popular alternative is &lt;a href="https://podman.io/getting-started/">Podman&lt;/a> which you can use to run LocalStack.
Podman support is still experimental, and the following docs give you an overview of the current state.&lt;/p>
&lt;p>From the Podman docs:&lt;/p>
&lt;blockquote>
&lt;p>Podman is a daemonless, open source, Linux native tool designed to make it easy to find, run, build, share and deploy applications using Open Containers Initiative (OCI) Containers and Container Images. Podman provides a command line interface (CLI) familiar to anyone who has used the Docker Container Engine. Most users can simply alias Docker to Podman (&lt;code>alias docker=podman&lt;/code>) without any problems.&lt;/p>
&lt;/blockquote>
&lt;h2 id="options">Options&lt;/h2>
&lt;p>To run &lt;code>localstack&lt;/code>, simply aliasing &lt;code>alias docker=podman&lt;/code> is not enough, for the following reasons:&lt;/p>
&lt;ul>
&lt;li>&lt;code>localstack&lt;/code> is using &lt;a href="https://pypi.org/project/docker/">docker-py&lt;/a> which requires a connection to &lt;code>/var/run/docker.sock&lt;/code>&lt;/li>
&lt;li>Lambda requires mounting the Docker socket &lt;code>/var/run/docker.sock&lt;/code> into the container (see &lt;a href="/references/lambda-provider-v2/">Lambda Provider Behavioral Changes&lt;/a>).&lt;/li>
&lt;/ul>
&lt;p>Here are several options on running LocalStack using podman:&lt;/p>
&lt;h3 id="podman-docker">podman-docker&lt;/h3>
&lt;p>The package &lt;code>podman-docker&lt;/code> emulates the Docker CLI using podman. It creates the following links:&lt;/p>
&lt;ul>
&lt;li>&lt;code>/usr/bin/docker -&amp;gt; /usr/bin/podman&lt;/code>&lt;/li>
&lt;li>&lt;code>/var/run/docker.sock -&amp;gt; /run/podman/podman.sock&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>This package is available for some distros:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://archlinux.org/packages/community/x86_64/podman-docker/">https://archlinux.org/packages/community/x86_64/podman-docker/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://packages.ubuntu.com/impish/podman-docker">https://packages.ubuntu.com/impish/podman-docker&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://packages.debian.org/sid/podman-docker">https://packages.debian.org/sid/podman-docker&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="rootfull-podman-with-podman-docker">Rootfull Podman with podman-docker&lt;/h3>
&lt;p>The simplest option is to run &lt;code>localstack&lt;/code> using &lt;code>podman&lt;/code> by having &lt;code>podman-docker&lt;/code> and running &lt;code>localstack start&lt;/code> as root&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># you have to start the podman socket first&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo systemctl start podman
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo sh -c &lt;span style="color:#4e9a06">&amp;#39;DEBUG=1 localstack start&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="rootfull-podman-without-podman-docker">Rootfull Podman without podman-docker&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># you still have to start the podman socket first&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo systemctl start podman
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># you have to pass a bunch of env variables&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo sh -c &lt;span style="color:#4e9a06">&amp;#39;DEBUG=1 DOCKER_CMD=podman DOCKER_HOST=unix://run/podman/podman.sock DOCKER_SOCK=/run/podman/podman.sock localstack start&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="rootless-podman">Rootless Podman&lt;/h3>
&lt;p>You have to prepare your environment first:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://wiki.archlinux.org/title/Podman#Rootless_Podman">https://wiki.archlinux.org/title/Podman#Rootless_Podman&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/containers/podman/blob/main/docs/tutorials/rootless_tutorial.md">https://github.com/containers/podman/blob/main/docs/tutorials/rootless_tutorial.md&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.redhat.com/sysadmin/rootless-podman">https://www.redhat.com/sysadmin/rootless-podman&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># again, you have to start the podman socket first&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>systemctl --user start podman.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># and then localstack&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">DEBUG&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000">DOCKER_CMD&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;podman&amp;#34;&lt;/span> &lt;span style="color:#000">DOCKER_SOCK&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">$XDG_RUNTIME_DIR&lt;/span>/podman/podman.sock &lt;span style="color:#000">DOCKER_HOST&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>unix://&lt;span style="color:#000">$XDG_RUNTIME_DIR&lt;/span>/podman/podman.sock localstack start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you have problems with &lt;a href="https://wiki.archlinux.org/title/Podman#Set_subuid_and_subgid">subuid and subgid&lt;/a>, you could try to use &lt;a href="https://www.redhat.com/sysadmin/controlling-access-rootless-podman-users">overlay.ignore_chown_errors option&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">DEBUG&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000">DOCKER_CMD&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;podman --storage-opt overlay.ignore_chown_errors=true&amp;#34;&lt;/span> &lt;span style="color:#000">DOCKER_SOCK&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">$XDG_RUNTIME_DIR&lt;/span>/podman/podman.sock &lt;span style="color:#000">DOCKER_HOST&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>unix://&lt;span style="color:#000">$XDG_RUNTIME_DIR&lt;/span>/podman/podman.sock localstack start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>References: Docker images</title><link>/references/docker-images/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/docker-images/</guid><description>
&lt;p>LocalStack functions as a local “mini-cloud” operating system that runs inside a Docker container. LocalStack has multiple components, which include process management, file system abstraction, event processing, schedulers, and more. Running inside a Docker container, LocalStack exposes external network ports for integrations, SDKs, or CLI interfaces to connect to LocalStack APIs. The LocalStack &amp;amp; LocalStack Pro Docker images have been downloaded over 130+ million times and provide a multi-arch build compatible with AMD/x86 and ARM-based CPU architectures. This section will cover the different Docker images available for LocalStack and how to use them.&lt;/p>
&lt;h2 id="localstack-community-image">LocalStack Community image&lt;/h2>
&lt;p>The LocalStack Community image (&lt;code>localstack/localstack&lt;/code>) contains the community and open-source version of our &lt;a href="https://github.com/localstack/localstack">core cloud emulator&lt;/a>. To use the LocalStack Community image, you can pull the image from Docker Hub:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>docker pull localstack/localstack:latest&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>To use the LocalStack Community image, you don&amp;rsquo;t need to sign-up for an account on &lt;a href="https://app.localstack.cloud">LocalStack Web Application&lt;/a>. The Community image is free to use and does not require any API key to run. The Community image can be used to run &lt;a href="https://docs.localstack.cloud/user-guide/aws/">local AWS services&lt;/a> with &lt;a href="https://docs.localstack.cloud/user-guide/integrations/">integrations&lt;/a> on your local machine or in your &lt;a href="https://docs.localstack.cloud/user-guide/ci/">continuous integration pipelines&lt;/a>.&lt;/p>
&lt;p>The Community image also covers a limited set of &lt;a href="https://docs.localstack.cloud/user-guide/tools/">LocalStack Tools&lt;/a> to make your life as a cloud developer easier. You can use &lt;a href="https://localstack.cloud/products/cockpit/">LocalStack Cockpit&lt;/a> or &lt;a href="https://docs.localstack.cloud/user-guide/tools/localstack-docker-extension/">LocalStack Docker Extension&lt;/a> to use LocalStack with a graphical user interface.&lt;/p>
&lt;p>You can use the Community image to start your LocalStack container using various &lt;a href="https://docs.localstack.cloud/getting-started/installation/">installation methods&lt;/a>. While configuring to run LocalStack with Docker or Docker Compose, run the &lt;code>localstack/localstack&lt;/code> image with the appropriate tag you have pulled (if not &lt;code>latest&lt;/code>).&lt;/p>
&lt;h2 id="localstack-pro-image">LocalStack Pro image&lt;/h2>
&lt;p>LocalStack Pro contains various advanced extensions to the LocalStack base platform. With LocalStack Pro image, you can access all the emulated AWS cloud services running entirely on your local machine. To use the LocalStack Pro image, you can pull the image from Docker Hub:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>docker pull localstack/localstack-pro:latest&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>To use the LocalStack Pro image, you must configure an environment variable named &lt;code>LOCALSTACK_API_KEY&lt;/code> to contain your API key. The LocalStack Pro image will display a warning if you do not set an API key (or if the key is invalid/expired) and will not activate the Pro features. LocalStack Pro gives you access to the complete set of LocalStack features, including the &lt;a href="https://app.localstack.cloud">LocalStack Web Application&lt;/a> and &lt;a href="https://docs.localstack.cloud/getting-started/help-and-support/#pro-support">dedicated customer support&lt;/a>.&lt;/p>
&lt;p>You can use the Pro image to start your LocalStack container using various &lt;a href="https://docs.localstack.cloud/getting-started/installation/">installation methods&lt;/a>. While configuring to run LocalStack with Docker or Docker Compose, run the &lt;code>localstack/localstack-pro&lt;/code> image with the appropriate tag you have pulled (if not &lt;code>latest&lt;/code>).&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Notes&lt;/h4>
Earlier, we maintained &lt;code>localstack/localstack-light&lt;/code> and &lt;code>localstack/localstack-full&lt;/code> images. They have been deprecated and are removed with the LocalStack 2.0 release. The &lt;a href="https://hub.docker.com/r/localstack/bigdata/tags">BigData image&lt;/a>, which started as a &lt;code>bigdata_container&lt;/code> container, has also been deprecated in favor of a BigData Mono container which installs dependencies directly into the LocalStack (&lt;code>localstack_main&lt;/code>) container.
&lt;/div>
&lt;h2 id="image-tags">Image tags&lt;/h2>
&lt;p>We use tags for versions with significant features, enhancements, or bug fixes - following &lt;a href="https://semver.org">semantic versioning&lt;/a>. To ensure that we move quickly and steadily, we run nightly builds, where all our updates are available on the &lt;code>latest&lt;/code> tag of LocalStack&amp;rsquo;s Docker image. We intend to announce more significant features and enhancements during major &amp;amp; minor releases. We occasionally create patch releases for minor bug fixes and enhancements, to ensure that we can deliver changes quickly while not breaking your existing workflows (in case you prefer not to use &lt;code>latest&lt;/code>).&lt;/p>
&lt;p>To check out the various tags available for LocalStack, you can visit the &lt;a href="https://hub.docker.com/r/localstack/localstack/tags?page=1&amp;amp;ordering=last_updated">LocalStack Community&lt;/a> &amp;amp; &lt;a href="https://hub.docker.com/r/localstack/localstack-pro/tags?page=1&amp;amp;ordering=last_updated">LocalStack Pro&lt;/a> Docker Hub pages.&lt;/p></description></item></channel></rss>