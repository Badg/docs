<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs â€“ GitLab Runners</title><link>/tags/gitlab-runners/</link><description>Recent content in GitLab Runners on Docs</description><generator>Hugo -- gohugo.io</generator><atom:link href="/tags/gitlab-runners/index.xml" rel="self" type="application/rss+xml"/><item><title>Tutorials: End-to-End Testing in Gitlab CI with Testcontainers and LocalStack: Understanding Runners and Docker in Docker</title><link>/tutorials/gitlab_ci_testcontainers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/gitlab_ci_testcontainers/</guid><description>
&lt;h2 id="introduction-testcontainers--localstack">Introduction: Testcontainers &amp;amp; LocalStack&lt;/h2>
&lt;p>Testcontainers is an open-source framework that provides lightweight APIs for bootstrapping local development and test dependencies
with real services wrapped in Docker containers.
Running tests with Testcontainers and LocalStack is crucial for AWS-powered applications because it ensures each test runs in a clean,
isolated environment, providing consistency across all development and CI machines. LocalStack avoids AWS costs by emulating
services locally, preventing exceeding AWS free tier limits, and eliminates reliance on potentially unstable external AWS services.
This allows for the simulation of difficult-to-reproduce scenarios, edge cases, and enables testing of the
entire application stack in an integrated manner. Testing with LocalStack and Testcontainers also integrates
seamlessly with CI/CD pipelines like GitLab CI or GitHub Actions, allowing developers to run automated tests without requiring AWS credentials or services.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>For this tutorial, you will need:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.localstack.cloud/getting-started/auth-token/">LocalStack Pro&lt;/a> to emulate the AWS services. If you don&amp;rsquo;t have a subscription yet, you can just get a trial license for free.&lt;/li>
&lt;li>&lt;a href="https://docker.io/">Docker&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gitlab.com/">A GitLab account&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="gitlab-overview">GitLab overview&lt;/h2>
&lt;p>GitLab is striving to be a complete tool for DevOps practices, offering not just source code management and continuous integration, but also features for
monitoring, security, planning, deploying and more. By having your code and CI on the same platform, workflows are simplified and collaboration is enhanced.
While Jenkins is still a very prominent CI/CD tool in the industry, it is up to the user to figure out where to host it and focuses
solely on CI/CD features.&lt;/p>
&lt;h2 id="gitlab-architecture">GitLab architecture&lt;/h2>
&lt;figure>
&lt;img src="/tutorials/gitlab_ci_testcontainers/gitlab-architecture.png" width="80%" height="auto"/>
&lt;/figure>
&lt;br>
&lt;p>As users, we only interact directly with a GitLab instance which is responsible for hosting the application code and all the needed configurations, including the
ones for pipelines. The instance is then in charge of running the pipelines and assigning runners to execute the defined jobs.&lt;/p>
&lt;p>When running CI pipelines, you can choose to use &lt;a href="https://docs.gitlab.com/ee/ci/runners/index.html">&lt;strong>GitLab-hosted runners&lt;/strong>&lt;/a>, or provision and register
&lt;a href="https://docs.gitlab.com/runner/install/docker.html">&lt;strong>self-managed runners&lt;/strong>&lt;/a>. This tutorial will cover both.&lt;/p>
&lt;h3 id="runners-hosted-by-gitlab">Runners hosted by GitLab&lt;/h3>
&lt;p>The GitLab documentation highlights some key aspects about the provided runners:&lt;/p>
&lt;ul>
&lt;li>They can run on Linux, Windows (beta) and MacOS (beta).&lt;/li>
&lt;li>They are enabled by default for all projects, with no configuration required.&lt;/li>
&lt;li>Each job is executed by a newly provisioned VM.&lt;/li>
&lt;li>Job runs have &lt;code>sudo&lt;/code> access without a password.&lt;/li>
&lt;li>VMs are isolated between job executions.&lt;/li>
&lt;li>Their storage is shared by the operating system, the image with pre-installed software,
and a copy of your cloned repository, meaning that the remaining disk space for jobs will be reduced.&lt;/li>
&lt;li>The runners are configured to run in privileged mode to support Docker in Docker to build images natively or
run multiple containers within each job.&lt;/li>
&lt;/ul>
&lt;h3 id="self-hosted-runners">Self-hosted runners&lt;/h3>
&lt;p>Essentially, the architecture does not change, except the runners will be executing the jobs on a local machine. For developing locally,
this approach is very convenient and there are several benefits:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Customization&lt;/strong>: you can configure the runners to suit your specific needs and environment.&lt;/li>
&lt;li>&lt;strong>Performance&lt;/strong>: improved performance and faster builds by leveraging your own hardware.&lt;/li>
&lt;li>&lt;strong>Security&lt;/strong>: enhanced control over your data and build environment, reducing exposure to external threats.&lt;/li>
&lt;li>&lt;strong>Resource Management&lt;/strong>: better management and allocation of resources to meet your project&amp;rsquo;s demands.&lt;/li>
&lt;li>&lt;strong>Cost Efficiency&lt;/strong>: depending on your alternatives, you can avoid usage fees associated with cloud-hosted runners.&lt;/li>
&lt;/ul>
&lt;h2 id="application-overview">Application Overview&lt;/h2>
&lt;p>Our sample backend application stores information about different types of coffee in files, with descriptions stored in an S3 bucket. It utilizes two
Lambda functions to create/update and retrieve these descriptions, all accessible through an API Gateway. While we won&amp;rsquo;t delve
into the details of creating these AWS resources, we&amp;rsquo;ll use AWS CLI to initialize them during container startup using init hooks. You can
find the whole setup in the &lt;a href="https://gitlab.com/tinyg210/coffee-backend-localstack/-/blob/main/src/test/resources/init-resources.sh?ref_type=heads">init-resources.sh&lt;/a> file.
The following diagram visually explains the simple workflows that we want to check in our automated test in CI, using Testcontainers.
We&amp;rsquo;ll need to make sure that the files are correctly created and named, that the validations and exceptions happen as expected.
&lt;br>
&lt;br>
&lt;figure>
&lt;img src="/tutorials/gitlab_ci_testcontainers/coffee-app-diagram.png" width="80%" height="auto"/>
&lt;/figure>
&lt;/p>
&lt;h2 id="ci-pipeline-using-gitlab-runners">CI Pipeline Using GitLab Runners&lt;/h2>
&lt;h3 id="configuring-the-test-container">Configuring the test container&lt;/h3>
&lt;p>To follow along, make changes to the code or run your own pipelines, you may fork the repository from the &lt;a href="https://gitlab.com/tinyg210/coffee-backend-localstack">coffee-backend-localstack sample&lt;/a>.
&lt;br>
The application is developed, built and tested locally, the next step is to establish a quality gate in the pipeline, to make sure nothing breaks.&lt;/p>
&lt;p>The basis for the container used for testing looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5c35cc;font-weight:bold">@Testcontainers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">LocalStackConfig&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5c35cc;font-weight:bold">@Container&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">protected&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#000">LocalStackContainer&lt;/span> &lt;span style="color:#000">localStack&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">LocalStackContainer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">DockerImageName&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">parse&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;localstack/localstack-pro:3.4.0&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">withEnv&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;LOCALSTACK_AUTH_TOKEN&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">System&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">getenv&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;LOCALSTACK_AUTH_TOKEN&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">withCopyFileToContainer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">MountableFile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">forHostPath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;target/lambda.jar&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">0777&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;/etc/localstack/init/ready.d/target/lambda.jar&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">withCopyFileToContainer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">MountableFile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">forClasspathResource&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;init-resources.sh&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">0777&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;/etc/localstack/init/ready.d/init-resources.sh&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">withEnv&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;DEBUG&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">withNetworkAliases&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;localstack&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">withEnv&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;LAMBDA_DOCKER_FLAGS&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">testcontainersLabels&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">withEnv&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;LAMBDA_RUNTIME_ENVIRONMENT_TIMEOUT&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;90&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">waitingFor&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Wait&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">forLogMessage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;.*Finished creating resources.*\\n&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">......&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here&amp;rsquo;s a breakdown of what&amp;rsquo;s important:&lt;/p>
&lt;ul>
&lt;li>The &lt;code>@Testcontainers&lt;/code> marks the test class to use the Testcontainers library.&lt;/li>
&lt;li>The &lt;code>@Container&lt;/code> annotation indicates that the field is a Testcontainers managed container.&lt;/li>
&lt;li>The image used for the test LocalStack instance is set to the latest Pro version (at the time of writing).&lt;/li>
&lt;li>In order to use the Pro image, a &lt;code>LOCALSTACK_AUTH_TOKEN&lt;/code> variable needs to be set and read from the environment.&lt;/li>
&lt;li>There are two files copied to the container before startup: the JAR file for the Lambda functions and the script for provisioning
all the necessary AWS resources. Both files are copied with read/write/execute permissions.&lt;/li>
&lt;li>&lt;code>DEBUG=1&lt;/code> enables a more verbose logging of LocalStack.&lt;/li>
&lt;li>&lt;code>LAMBDA_DOCKER_FLAGS&lt;/code> sets specific Testcontainers labels to the Lambda containers, as a solution to be correctly managed by Ryuk.
Since the compute containers are created by LocalStack and not the Testcontainers framework, they do not receive the necessary tags.&lt;/li>
&lt;li>&lt;code>LAMBDA_RUNTIME_ENVIRONMENT_TIMEOUT&lt;/code> sets an environment variable to configure the Lambda runtime environment timeout to 90 seconds, for slower environments.&lt;/li>
&lt;li>The last line &lt;code>.waitingFor(Wait.forLogMessage(...))&lt;/code> configures the container to wait until the specified log message appears, exactly once, indicating that resource creation is complete.&lt;/li>
&lt;/ul>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Sidenote&lt;/h4>
&lt;p>Ryuk is a component of Testcontainers that helps manage and clean up Docker resources created during testing. Specifically, Ryuk
ensures that any Docker containers, networks, volumes, and other resources are properly removed when they are no longer needed.
This prevents resource leaks and ensures that the testing environment remains clean and consistent between test runs.&lt;/p>
&lt;p>When Testcontainers starts, it typically launches a Ryuk container in the background. This container continuously monitors
the Docker resources created by Testcontainers and removes them once the test execution is complete or if they are no longer in use.&lt;/p>
&lt;/div>
&lt;p>The tests are set up in the &lt;code>CoffeeAppTests&lt;/code> class, validating the workflows for creating a coffee description files, retrieving them, and exception throwing when needed.
For this tutorial you don&amp;rsquo;t really need to dive into the specifics of the tests, but you&amp;rsquo;re more than welcome to.&lt;/p>
&lt;h3 id="setting-up-the-pipeline-configuration">Setting up the pipeline configuration&lt;/h3>
&lt;p>The &lt;code>.gitlab-ci.yml&lt;/code> file is a configuration file for defining GitLab CI/CD pipelines, which automate the process of building, testing,
and deploying applications. It specifies stages (such as build, test, and deploy) and the jobs within each stage, detailing the commands
to be executed. Jobs can define dependencies, artifacts, and environment variables. Pipelines are triggered by events like code pushes,
merge requests, or schedules, and they are executed by runners.
This file enables automated, consistent, and repeatable workflows for software development and deployment. In this example we will focus on
just the building and testing parts.&lt;/p>
&lt;p>Let&amp;rsquo;s break down the &lt;code>.gitlab-ci.yml&lt;/code> for this project:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ubuntu:latest&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">before_script&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># install necessary dependencies&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">apt-get update &amp;amp;&amp;amp; apt-get install -y curl tar bash maven docker.io&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">curl -L https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.tar.gz -o /tmp/openjdk.tar.gz&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">tar -xzf /tmp/openjdk.tar.gz -C /opt&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">mv /opt/jdk-21* /opt/jdk-21&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">export JAVA_HOME=&amp;#34;/opt/jdk-21&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">export PATH=&amp;#34;$JAVA_HOME/bin:$PATH&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">stages&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">build&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">test&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">cache&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">paths&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">.m2/repository&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">target&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">build_job&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">stage&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">build&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">script&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">echo &amp;#34;Running build...&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">mvn clean package -DskipTests&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">artifacts&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">paths&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">target/&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">test_job&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">stage&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">test&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">services&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">docker:26.1.2-dind&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">variables&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">DOCKER_HOST&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">tcp://docker:2375&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">DOCKER_TLS_CERTDIR&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">DOCKER_DRIVER&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">overlay2&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">LOCALSTACK_AUTH_TOKEN&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">$LOCALSTACK_AUTH_TOKEN&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">script&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">echo &amp;#34;Running tests...&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">mvn test&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">allow_failure&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>image: ubuntu:latest&lt;/code> - This specifies the base Docker image used for all jobs in the pipeline. &lt;code>ubuntu:latest&lt;/code> is a popular and
easy choice because it&amp;rsquo;s a well-known, stable, and widely-supported Linux distribution. It ensures a consistent environment across
all pipeline stages. Each job can define its own image (for example &lt;code>maven&lt;/code> or &lt;code>docker&lt;/code> images), but in this case a generic image with the
necessary dependencies (curl, Java, maven, docker) installed covers the needs for both stages.&lt;/li>
&lt;li>&lt;code>before_script&lt;/code> - these commands are run before any job script in the pipeline, on top of the Ubuntu image.&lt;/li>
&lt;li>The two stages are defined at the top: &lt;code>build&lt;/code> and &lt;code>test&lt;/code>.&lt;/li>
&lt;li>&lt;code>cache&lt;/code> - caches the Maven dependencies to speed up subsequent pipeline runs.&lt;/li>
&lt;li>&lt;code>.m2/repository&lt;/code> - this is the default location where Maven stores its local repository of dependencies.&lt;/li>
&lt;li>The &lt;code>script&lt;/code> section - specifies the scripts that run for each job.&lt;/li>
&lt;li>&lt;code>artifacts&lt;/code> - specifies the build artifacts (e.g., JAR files) to be preserved and passed to the next stages (the &lt;code>target&lt;/code> folder).&lt;/li>
&lt;li>The build job runs only on the &lt;code>main&lt;/code> branch.&lt;/li>
&lt;li>&lt;code>docker:26.1.2-dind&lt;/code> - specifies the service necessary to use Docker-in-Docker to run Docker commands inside the pipeline job. This is
useful for integration testing with Docker containers.&lt;/li>
&lt;li>Variables:
&lt;ul>
&lt;li>&lt;code>DOCKER_HOST: tcp://docker:2375&lt;/code> - sets the Docker host to communicate with the Docker daemon inside the dind service.&lt;/li>
&lt;li>&lt;code>DOCKER_TLS_CERTDIR: &amp;quot;&amp;quot;&lt;/code> - we&amp;rsquo;ll disable TLS to simplify the setup in a testing environment.&lt;/li>
&lt;li>&lt;code>DOCKER_DRIVER: overlay2&lt;/code> - specifies the storage driver for Docker, ensuring better performance and compatibility.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The last line ensures that the pipeline fails if the tests fail.&lt;/li>
&lt;/ul>
&lt;h3 id="executors">Executors&lt;/h3>
&lt;p>We mentioned in the beginning that each job runs in a newly provisioned VM. You can also notice that the pipeline configuration mentions
a docker image, which is a template that contains instructions for creating a container. This might look confusing, but a runner is responsible
for the execution of one job. This runner is installed on a machine and implements
a certain &lt;a href="https://docs.gitlab.com/runner/executors/">executor&lt;/a>. The executor determines the environment in which the job runs. By
default, the GitLab-managed runners use a Docker Machine executor. Some other available executor options are: SSH, Shell, Parallels,
VirtualBox, Docker, Docker Autoscaler, Kubernetes.&lt;/p>
&lt;p>Sometimes visualizing the components of a pipeline can be tricky, so let&amp;rsquo;s simplify this into a diagram:&lt;/p>
&lt;figure>
&lt;img src="/tutorials/gitlab_ci_testcontainers/gitlab-ci-diagram.png" width="80%" height="auto"/>
&lt;/figure>
&lt;p>Basically, the &lt;code>service&lt;/code> is an additional container that starts at the same time as the one running the &lt;code>test_job&lt;/code>. The job container has
a Docker client, and it communicates with the Docker daemon, running in the service container, in order to spin up more containers, in this
case for the Lambda functions.&lt;/p>
&lt;p>Don&amp;rsquo;t forget to add your &lt;code>LOCALSTACK_AUTH_TOKEN&lt;/code> as a masked variable in your CI/CD settings.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vue" data-lang="vue">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Settings&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">CI&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">CD&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">Expand&lt;/span> &lt;span style="color:#000">the&lt;/span> &lt;span style="color:#000">Variables&lt;/span> &lt;span style="color:#000">section&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">Add&lt;/span> &lt;span style="color:#000">variable&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;figure>
&lt;img src="/tutorials/gitlab_ci_testcontainers/ci-variable.png" width="80%" height="auto"/>
&lt;/figure>
&lt;p>In the web interface, under the Jobs section, you can see the jobs that ran, and you can also filter them based on their status.&lt;/p>
&lt;figure>
&lt;img src="/tutorials/gitlab_ci_testcontainers/pipeline-run.png" width="80%" height="auto"/>
&lt;/figure>
&lt;h2 id="ci-pipeline-using-self-hosted-runners">CI Pipeline Using Self-hosted Runners&lt;/h2>
&lt;p>There are some cases when you want to run your pipelines locally and GitLab can provide that functionality.
If you&amp;rsquo;re new to the GitLab ecosystem, you need to be careful in configuring this setup, because it&amp;rsquo;s easy to overlook an important field which
can hinder your job runs.&lt;/p>
&lt;p>Let&amp;rsquo;s get started by using the web interface. In your GitLab project, in the left-hand side panel, follow the path:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vue" data-lang="vue">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Settings&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">CI&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">CD&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">Expand&lt;/span> &lt;span style="color:#000">the&lt;/span> &lt;span style="color:#000">Runners&lt;/span> &lt;span style="color:#000">section&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">Project&lt;/span> &lt;span style="color:#000">runners&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">New&lt;/span> &lt;span style="color:#000">project&lt;/span> &lt;span style="color:#000">runner&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;figure>
&lt;img src="/tutorials/gitlab_ci_testcontainers/project-runners-section.png" width="80%" height="auto"/>
&lt;/figure>
&lt;p>Adding a tag, will allow you in the future to select a particular subset of runners to execute pipelines that require specific attributes.
You can go ahead an tick the &lt;code>Run untagged jobs&lt;/code> checkbox to be able to use this runner for all jobs that don&amp;rsquo;t have a tag defined.
The following fields are optional, the description of the runner and the maximum job timeout.&lt;/p>
&lt;figure>
&lt;img src="/tutorials/gitlab_ci_testcontainers/create-runner-1.png" width="80%" height="auto"/>
&lt;/figure>
&lt;p>This dashboard may suffer changes and improvements over time, but the attributes should essentially remain the same.&lt;/p>
&lt;figure>
&lt;img src="/tutorials/gitlab_ci_testcontainers/create-runner-2.png" width="80%" height="auto"/>
&lt;/figure>
&lt;p>After selecting the Linux machine you&amp;rsquo;re done with defining the runner. Now you need a place to execute this runner, which will be your local
computer. Notice the token in the first step command and save it for later. Runner authentication tokens have the prefix &lt;code>glrt-&lt;/code>.&lt;/p>
&lt;p>For simplicity, we&amp;rsquo;ll use a GitLab Runner Docker image. The GitLab Runner Docker images are designed as wrappers around the standard
&lt;code>gitlab-runner&lt;/code> command, like if GitLab Runner was installed directly on the host. You can read more about it in the &lt;a href="https://docs.gitlab.com/runner/install/docker.html">GitLab documentation&lt;/a>.&lt;/p>
&lt;p>Make sure you have Docker installed. To verify your setup you can run the &lt;code>docker info&lt;/code> command.&lt;/p>
&lt;p>Now, you need to create a volume on the disk that holds the configuration for the runner. You can have different volumes that can be
used for different runners.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>docker volume create gitlab-runner-config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;div class="disable-copy">
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gitlab-runner-config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/div>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The agent that will interact with the system to create the runner needs to be run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>docker run -d --name gitlab-runner \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--restart always \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-v /var/run/docker.sock:/var/run/docker.sock \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-v gitlab-runner-config:/etc/gitlab-runner/ \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gitlab/gitlab-runner:latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;div class="disable-copy">
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>79ad150847bd78fc567b08cafd96fc6bfec8f1946feb2beea89d7c6c395c01c4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/div>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The breakdown for this command:&lt;/p>
&lt;ul>
&lt;li>The container is named &lt;code>gitlab-runner&lt;/code>.&lt;/li>
&lt;li>It is configured to always restart.&lt;/li>
&lt;li>It has access to the Docker socket on the host machine, allowing it to manage Docker containers - which is very important here.&lt;/li>
&lt;li>It uses the named volume previously defined for persistent configuration storage.&lt;/li>
&lt;li>It uses the latest GitLab Runner image.&lt;/li>
&lt;/ul>
&lt;p>The next step is to register the runner:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>docker run --rm -it \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-v gitlab-runner-config:/etc/gitlab-runner/ \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gitlab/gitlab-runner:latest register
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;div class="disable-copy">
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>79ad150847bd78fc567b08cafd96fc6bfec8f1946feb2beea89d7c6c395c01c4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/div>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Follow the instructions that are prompted:&lt;/p>
&lt;figure>
&lt;img src="/tutorials/gitlab_ci_testcontainers/runner-config.png" width="80%" height="auto"/>
&lt;/figure>
&lt;p>In the container logs you should see this:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-commandline" data-lang="commandline">Configuration loaded builds=0 max_builds=1
&lt;/code>&lt;/pre>&lt;p>Let&amp;rsquo;s look at the &lt;code>config.toml&lt;/code> file and make the final adjustment before successfully running the pipeline.
For running a job that does not require any additional containers to be created, you can stop here. However, since
we need to run Docker commands in our CI/CD jobs, we must configure GitLab Runner to support those commands.
This method requires &lt;code>privileged&lt;/code> mode.&lt;/p>
&lt;p>Let&amp;rsquo;s use the current running container to do that. Run the following:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-commandline" data-lang="commandline">$ docker exec -it gitlab-runner bin/bash
&lt;/code>&lt;/pre>&lt;p>Inside the container, let&amp;rsquo;s run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>cd etc/gitlab-runner
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>ls -al
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;div class="disable-copy">
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total 24
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwx------ 3 root root 4096 May 16 19:58 .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x 1 root root 4096 May 16 19:56 ..
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw------- 1 root root 14 May 16 19:50 .runner_system_id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwx------ 2 root root 4096 May 3 17:36 certs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rwx------ 1 root root 781 May 16 19:52 config.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/div>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>You can see the file that contains all the runner configurations.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>apt update &amp;amp;&amp;amp; apt install nano
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>nano config.toml&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The &lt;code>privileged&lt;/code> field needs to be changed to &lt;code>true&lt;/code>. Now the configurations should look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">connection_max_age&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;15m0s&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">shutdown_timeout&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">session_server&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">session_timeout&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1800&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#000">runners&lt;/span>&lt;span style="color:#000;font-weight:bold">]]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">name&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;localstack-testcontainers-runner&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">url&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;https://gitlab.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">id&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">36509569&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">token&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;glrt-RUNNER_AUTHENTICATION_TOKEN&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">token_obtained_at&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">2024-05-16T19:51:27Z&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">token_expires_at&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">0001-01-01T00:00:00Z&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">executor&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;docker&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">runners&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">custom_build_dir&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">runners&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">cache&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">MaxUploadedArchiveSize&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">runners&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">cache&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">s3&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">runners&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">cache&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">gcs&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">runners&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">cache&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">azure&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">runners&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">docker&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">tls_verify&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">image&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;docker:26.1.2-dind&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">privileged&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">disable_entrypoint_overwrite&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">oom_kill_disable&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">disable_cache&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">volumes&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/cache&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">shm_size&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">network_mtu&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>[CTRL] + [X]&lt;/code> to save and exit the file. The runner is ready to use. You can now run your pipeline by pushing changes to your project
or from the dashboard, by going to &lt;code>Build -&amp;gt; Pipelines&lt;/code> and using the &lt;code>Run pipeline&lt;/code> button.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>In this tutorial, we&amp;rsquo;ve covered setting up a CI pipeline with GitLab runners and configuring a local Docker container to run the pipeline
using a self-configured GitLab runner. Overall, the GitLab platform is an intricate system that can be used for highly complex projects to serve
a multitude of purposes. With the steps learnt in this article, you can efficiently run end-to-end tests for your application using Testcontainers
and LocalStack.&lt;/p></description></item></channel></rss>