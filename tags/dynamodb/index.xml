<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DynamoDB on Docs</title><link>/tags/dynamodb/</link><description>Recent content in DynamoDB on Docs</description><generator>Hugo</generator><language>en</language><atom:link href="/tags/dynamodb/index.xml" rel="self" type="application/rss+xml"/><item><title>How To: Collaborative AWS local development with LocalStackâ€™s Cloud Pods</title><link>/tutorials/cloud-pods-collaborative-debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/cloud-pods-collaborative-debugging/</guid><description>Introduction By replicating environments, teams can share the exact conditions under which a bug occurs.
For developing AWS applications locally, the tool of choice is LocalStack, which can sustain a full-blown comprehensive stack. However, when issues appear, and engineers need a second opinion from a colleague, recreating the environment from scratch can leave details slipping through the cracks. This is where Cloud Pods come in, to encapsulate the state of the LocalStack instance and allow for seamless collaboration.</description></item><item><title>Chaos Engineering: Running Experiments with Fault Injection Service</title><link>/tutorials/fault-injection-service-experiments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/fault-injection-service-experiments/</guid><description>Introduction Fault Injection Simulator (FIS) is a service designed for conducting controlled chaos engineering tests on AWS infrastructure. Its purpose is to uncover vulnerabilities and improve system robustness. FIS offers a means to deliberately introduce failures and observe their impacts, helping developers to better equip their systems against actual outages. To read about the FIS service, refer to the dedicated FIS documentation.
Getting started This tutorial is designed for users new to the Fault Injection Simulator and assumes basic knowledge of the AWS CLI and our awslocal wrapper script.</description></item><item><title>Chaos Engineering: Route53 Failover with FIS</title><link>/tutorials/route53-failover-with-fis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/route53-failover-with-fis/</guid><description>Introduction LocalStack allows you to integrate &amp;amp; test Fault Injection Simulator (FIS) with Route53 to automatically divert users to a healthy secondary zone if the primary region fails, ensuring system availability and responsiveness. Route53&amp;rsquo;s health checks and traffic redirection enhance architecture resilience and ensure service continuity during regional outages, crucial for uninterrupted user experiences.
Note Route53 Failover with FIS is currently available as part of the LocalStack Enterprise plan. If you&amp;rsquo;d like to try it out, please contact us to request access.</description></item><item><title>Chaos Engineering: Simulating outages in your application stack</title><link>/tutorials/simulating-outages-in-your-application-stack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/simulating-outages-in-your-application-stack/</guid><description>Introduction LocalStack Outages Extension can simulate outages for any AWS region or service. You can install and use the Outages Extension through LocalStack Extension mechanism to test infrastructure resilience by intentionally causing service outages and observing the system&amp;rsquo;s recovery in scenarios with incomplete infrastructure is an effective approach. This method evaluates the system&amp;rsquo;s deployment mechanisms and its ability to handle and recover from infrastructure anomalies, a critical aspect of chaos engineering.</description></item><item><title>AppSync GraphQL APIs for DynamoDB and RDS Aurora PostgreSQL</title><link>/applications/appsync-graphql-apis-for-dynamodb-and-rds-aurora-postgresql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/applications/appsync-graphql-apis-for-dynamodb-and-rds-aurora-postgresql/</guid><description/></item></channel></rss>