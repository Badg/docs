<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs – dynamodb</title><link>/tags/dynamodb/</link><description>Recent content in dynamodb on Docs</description><generator>Hugo -- gohugo.io</generator><atom:link href="/tags/dynamodb/index.xml" rel="self" type="application/rss+xml"/><item><title>Tutorials: How To: Collaborative AWS local development with LocalStack’s Cloud Pods</title><link>/tutorials/cloud-pods-collaborative-debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/cloud-pods-collaborative-debugging/</guid><description>
&lt;h1 id="introduction">&lt;strong>Introduction&lt;/strong>&lt;/h1>
&lt;p>By replicating environments, teams can share the exact conditions under which a bug occurs.&lt;/p>
&lt;p>For developing AWS applications locally, the tool of choice is LocalStack, which can sustain a full-blown comprehensive stack.
However, when issues appear, and engineers need a second opinion from a colleague, recreating the environment from scratch can leave
details slipping through the cracks. This is where Cloud Pods come in, to encapsulate the state of the LocalStack instance and allow for seamless
collaboration. While databases have snapshots, similarly, LocalStack uses Cloud Pods for reproducing state and data.&lt;/p>
&lt;p>In this tutorial, we will explore a common situation where a basic IAM misconfiguration causes unnecessary delays in finding the right solution.
We will also discuss the best practices to prevent this and review some options for configuring Cloud Pod storage.
The full sample application can be found &lt;a href="https://github.com/localstack-samples/cloud-pods-collaboration-demo">on GitHub&lt;/a> to clone, for following along more easily.&lt;/p>
&lt;h3 id="prerequisites">&lt;strong>Prerequisites&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://docs.localstack.cloud/getting-started/installation/#localstack-cli">LocalStack CLI&lt;/a> (preferably using &lt;code>pip&lt;/code>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://docs.docker.com/engine/install/">Docker&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli">Terraform&lt;/a> or &lt;a href="https://opentofu.org/docs/intro/install/">OpenTofu&lt;/a> and &lt;a href="https://docs.localstack.cloud/user-guide/integrations/terraform/#install-the-tflocal-wrapper-script">terraform-local&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Optional for Lambda build &amp;amp; editing: &lt;a href="https://maven.apache.org/install.html">Maven 3.9.4&lt;/a> &amp;amp; &lt;a href="https://www.java.com/en/download/help/download_options.html">Java 21&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Basic knowledge of AWS services (API Gateway, Lambda, DynamoDB, IAM)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Basic understanding of Terraform for provisioning AWS resources&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>In this demo scenario, a new colleague, Bob, joins the company, clones the application repository, and starts working on the Lambda code. He will add the necessary
resources in the Terraform configuration file and some IAM policies that the functions need in order to access the database.
He is following good practice rules, where the resource has only the necessary permissions. However, Bob encounters an error despite this.&lt;/p>
&lt;h3 id="architecture-overview">Architecture Overview&lt;/h3>
&lt;p>The stack consists of an API Gateway that exposes endpoints and integrates with two Lambda functions responsible for adding and fetching
products from a DynamoDB database. IAM policies are enforced to ensure compliance with the
&lt;strong>&lt;a href="https://en.wikipedia.org/wiki/Principle_of_least_privilege">principle of least privilege&lt;/a>&lt;/strong>, and the logs will be sent to the CloudWatch service.&lt;/p>
&lt;h3 id="note">Note&lt;/h3>
&lt;p>This demo application is suitable for AWS and behaves the same as on LocalStack. You can try this out by running the Terraform configuration file against the AWS platform.&lt;/p>
&lt;p>&lt;img src="cloud-pod-collab.png" alt="Application Diagram">&lt;/p>
&lt;h3 id="starting-localstack">Starting LocalStack&lt;/h3>
&lt;p>In the root directory, there is a &lt;code>docker-compose.yml&lt;/code> file that will spin up version 3.3.0 of LocalStack, with an
important configuration flag, &lt;code>ENFORCE_IAM=1&lt;/code>, which will facilitate IAM policy evaluation and enforcement. For this
example, a &lt;code>LOCALSTACK_AUTH_TOKEN&lt;/code> is needed, which you can find in the LocalStack web app on the
&lt;a href="https://app.localstack.cloud/getting-started">Getting Started&lt;/a> page.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>export LOCALSTACK_AUTH_TOKEN=&amp;lt;YOUR_LOCALSTACK_AUTH_TOKEN&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>docker compose up&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="the-terraform-configuration-file">The Terraform Configuration File&lt;/h3>
&lt;p>The entire Terraform configuration file for setting up the application stack is available in the same repository at
&lt;a href="https://github.com/localstack-samples/cloud-pods-collaboration-demo/blob/main/terraform/main.tf">https://github.com/localstack-samples/cloud-pods-collaboration-demo/blob/main/terraform/main.tf&lt;/a>. To deploy all the resources on LocalStack,
navigate to the project&amp;rsquo;s root folder and use the following commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>cd terraform
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>tflocal init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>tflocal plan
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>tflocal apply --auto-approve&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>&lt;code>tflocal&lt;/code> is a small wrapper script to run Terraform against LocalStack. The endpoints for all services are configured to point to the
LocalStack API, which allows you to deploy your unmodified Terraform scripts against LocalStack.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>init&lt;/code>&lt;/strong>: This command initializes the Terraform working directory, installs any necessary plugins, and sets up the backend.&lt;/li>
&lt;li>&lt;strong>&lt;code>plan&lt;/code>&lt;/strong>: Creates an execution plan, which allows you to review the actions Terraform will take to change your infrastructure.&lt;/li>
&lt;li>&lt;strong>&lt;code>apply&lt;/code>&lt;/strong>: Finally, the &lt;strong>&lt;code>apply&lt;/code>&lt;/strong> command applies the changes required to reach the desired state of the configuration.
If &lt;strong>&lt;code>-auto-approve&lt;/code>&lt;/strong> is used, it bypasses the interactive approval step normally required.&lt;/li>
&lt;/ul>
&lt;p>As mentioned previously, there is something missing from this configuration, and that is the &lt;strong>&lt;code>GetItem&lt;/code>&lt;/strong> operation permission
for one of the Lambda functions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">resource&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;aws_iam_policy&amp;#34;&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;lambda_dynamodb_policy&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">name&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;LambdaDynamoDBAccess&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">description&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;IAM policy for accessing DynamoDB from Lambda&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">policy&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">jsonencode&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">({&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Version&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;2012-10-17&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Statement&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Action&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;dynamodb:Scan&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;dynamodb:Query&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;dynamodb:UpdateItem&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;dynamodb:PutItem&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Effect&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Allow&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Resource&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Bob has mistakenly used &lt;code>dynamodb:Scan&lt;/code> and &lt;code>dynamodb:Query&lt;/code>, but missed adding the &lt;code>dynamodb:GetItem&lt;/code> action to the policy document above.&lt;/p>
&lt;h3 id="reproducing-the-issue-locally">Reproducing the issue locally&lt;/h3>
&lt;p>Let’s test out the current state of the application. The Terraform configuration file outputs the REST API ID of the API Gateway.
We can capture that value and use it further to invoke the &lt;strong>&lt;code>add-product&lt;/code>&lt;/strong> Lambda:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>export rest_api_id=$(cd terraform; tflocal output --raw rest_api_id)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The endpoint for the API Gateway is constructed similarly to the one on AWS:&lt;/p>
&lt;p>&lt;strong>&lt;code>https://&amp;lt;apiId&amp;gt;.execute-api.localhost.localstack.cloud:4566/&amp;lt;stageId&amp;gt;/&amp;lt;path&amp;gt;&lt;/code>&lt;/strong>&lt;/p>
&lt;p>So adding two products to the database is straightforward using &lt;code>curl&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>curl --location &amp;#34;http://$rest_api_id.execute-api.localhost.localstack.cloud:4566/dev/productApi&amp;#34; \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--header &amp;#39;Content-Type: application/json&amp;#39; \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--data &amp;#39;{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;id&amp;#34;: &amp;#34;34534&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;name&amp;#34;: &amp;#34;EcoFriendly Water Bottle&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;description&amp;#34;: &amp;#34;A durable, eco-friendly water bottle designed to keep your drinks cold for up to 24 hours and hot for up to 12 hours. Made from high-quality, food-grade stainless steel, it&amp;#39;\&amp;#39;&amp;#39;s perfect for your daily hydration needs.&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;price&amp;#34;: &amp;#34;29.99&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>curl --location &amp;#34;http://$rest_api_id.execute-api.localhost.localstack.cloud:4566/dev/productApi?id=82736&amp;#34; \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--header &amp;#39;Content-Type: application/json&amp;#39; \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--data &amp;#39;{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;id&amp;#34;: &amp;#34;82736&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;name&amp;#34;: &amp;#34;Sustainable Hydration Flask&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;description&amp;#34;: &amp;#34;This sustainable hydration flask is engineered to maintain your beverages at the ideal temperature—cold for 24 hours and hot for 12 hours. Constructed with premium, food-grade stainless steel, it offers an environmentally friendly solution to stay hydrated throughout the day.&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;price&amp;#34;: &amp;#34;31.50&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&amp;#39;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The response is the one that we expect: &lt;code>Product added/updated successfully.&lt;/code>&lt;/p>
&lt;p>However, retrieving one of the products does not return the desired result:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>curl --location &amp;#34;http://$rest_api_id.execute-api.localhost.localstack.cloud:4566/dev/productApi?id=34534&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;div class="disable-copy">
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Internal server error⏎
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/div>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>An &lt;code>Internal server error⏎&lt;/code> does not give out too much information. Bob does not know for sure what could be
causing this. The Lambda code and the configurations look fine to him.&lt;/p>
&lt;h2 id="using-cloud-pods-for-collaborative-debugging">Using Cloud Pods for collaborative debugging&lt;/h2>
&lt;h3 id="creating-a-cloud-pod">Creating a Cloud Pod&lt;/h3>
&lt;p>To share this exact environment and issue with Alice, a more experienced colleague, Bob only needs to run a simple &lt;code>localstack pod&lt;/code> command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack pod save cloud-pod-product-app
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;div class="disable-copy">
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cloud Pod `cloud-pod-product-app` successfully created ✅
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Version: 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Remote: platform
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Services: sts,iam,apigateway,dynamodb,lambda,s3,cloudwatch,logs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/div>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>LocalStack provides a remote storage backend that can be used to store the state of your application and share it with your team members.&lt;/p>
&lt;p>The Cloud Pods CLI is included in the LocalStack CLI installation, so there’s no need for additional plugins to begin using it.
The &lt;code>LOCALSTACK_AUTH_TOKEN&lt;/code> needs to be set as an environment variable.&lt;/p>
&lt;p>Additionally, there are other commands for managing Cloud Pods included in the CLI:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack pod --help
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;div class="disable-copy">
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Usage: localstack pod [OPTIONS] COMMAND [ARGS]...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Manage the state of your instance via Cloud Pods.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Options:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -h, --help Show this message and exit.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Commands:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> delete Delete a Cloud Pod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> list List all available Cloud Pods
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> load Load the state of a Cloud Pod into the application runtime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> remote Manage Cloud Pod remotes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> save Create a new Cloud Pod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> versions List all available versions for a Cloud Pod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/div>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="pulling-and-loading-the-cloud-pod">Pulling and Loading the Cloud Pod&lt;/h3>
&lt;p>The workflow between Alice and Bob is incredibly easy:&lt;/p>
&lt;p>&lt;img src="bob-alice-cloud-pod-collab.png" alt="Bob and Alice Collab">&lt;/p>
&lt;p>Now, in a fresh LocalStack instance, Alice can immediately load the Cloud Pod, because she&amp;rsquo;s part of the
same organization:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack pod load cloud-pod-product-app
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;div class="disable-copy">
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cloud Pod cloud-pod-product-app successfully loaded
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/div>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="debugging-and-resolving-the-issue">Debugging and Resolving the Issue&lt;/h3>
&lt;p>Not only can Alice easily reproduce the bug now, but she also has access to the state and data of the services
involved, meaning that the Lambda logs are still in the CloudWatch log groups.&lt;/p>
&lt;p>&lt;img src="cloudwatch-logs.png" alt="CloudWatch Logs">&lt;/p>
&lt;p>By spotting the error message, there’s an instant starting point for checking the source of the problem. The error message displayed in the logs is very specific:&lt;/p>
&lt;p>&lt;code>&amp;quot;Error: User: arn:aws:sts::000000000000:assumed-role/productRole/get-product is not authorized to perform: dynamodb:GetItem on resource: arn:aws:dynamodb:us-east-1:000000000000:table/Products because no identity-based policy allows the dynamodb:GetItem action (Service: DynamoDb, Status Code: 400, Request ID: d50e9dad-a01a-4860-8c21-e844a930ba7d)&amp;quot;&lt;/code>&lt;/p>
&lt;h3 id="identifying-the-misconfiguration">Identifying the Misconfiguration&lt;/h3>
&lt;p>The error points to a permissions issue related to accessing DynamoDB. The action &lt;strong>&lt;code>dynamodb:GetItem&lt;/code>&lt;/strong> is
not authorized for the role, preventing the retrieval of a product by its ID. This kind of error was not foreseen as one
of the exceptions to be handled in the application. IAM policies are not always easy and straightforward, so it&amp;rsquo;s a well known fact that
these configurations are prone to mistakes.&lt;/p>
&lt;p>To confirm the finding, Alice now has the exact same environment to reproduces the error in. There are no machine specific configurations and
no other manual changes. This leads to the next step in troubleshooting: &lt;strong>inspecting the Terraform configuration file&lt;/strong> responsible
for defining the permissions attached to the Lambda role for interacting with DynamoDB.&lt;/p>
&lt;h3 id="fixing-the-terraform-configuration">Fixing the Terraform Configuration&lt;/h3>
&lt;p>Upon review, Alice discovers that the Terraform configuration does not include the necessary permission &lt;strong>&lt;code>dynamodb:GetItem&lt;/code>&lt;/strong> in the
policy attached to the Lambda role. This oversight explains the error message. The Terraform configuration file acts as a
blueprint for AWS resource permissions, and any missing action can lead to errors related to authorization.&lt;/p>
&lt;p>This scenario underscores the importance of thorough review and testing of IAM roles and policies when working with AWS resources.
It&amp;rsquo;s easy to overlook a single action in a policy, but as we&amp;rsquo;ve seen, such an omission can significantly impact application
functionality. By carefully checking the Terraform configuration files and ensuring that all necessary permissions are included,
developers can avoid similar issues and ensure a smoother, error-free interaction with AWS services.&lt;/p>
&lt;p>The action list should now look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>resource &amp;#34;aws_iam_policy&amp;#34; &amp;#34;lambda_dynamodb_policy&amp;#34; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name = &amp;#34;LambdaDynamoDBAccess&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> description = &amp;#34;IAM policy for accessing DynamoDB from Lambda&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> policy = jsonencode({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Version = &amp;#34;2012-10-17&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Statement = [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Action = [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;dynamodb:GetItem&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;dynamodb:UpdateItem&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;dynamodb:PutItem&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Effect = &amp;#34;Allow&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Resource = &amp;#34;*&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>To double-check, Alice creates the stack on AWS, and observes that the issue is the same, related to policy
misconfiguration:&lt;/p>
&lt;p>&lt;img src="aws-cloudwatch-logs.png" alt="AWS CloudWatch Logs">&lt;/p>
&lt;h3 id="impact-on-the-team">Impact on the team&lt;/h3>
&lt;p>Alice has updated the infrastructure and deployed a new version of the Cloud Pod with the necessary fixes. Bob will
access the updated infrastructure and proceed with his tasks. Meanwhile, Carol is developing integration tests for the
CI pipeline. She will use the stable version of the infrastructure to ensure that the workflows function effectively from
start to finish.&lt;/p>
&lt;p>&lt;img src="carol-bob-alice-cloud-pod-collab.png" alt="Carol writes tests">&lt;/p>
&lt;h3 id="other-remote-options">Other Remote Options&lt;/h3>
&lt;p>For organizations with specific data regulations, LocalStack offers multiple remote storage options for Cloud Pods,
allowing full control with on-premises storage if needed.
That way, Bob, Alice and Carol could collaborate using either an S3 bucket remote storage or an ORAS (OCI Registry as Storage) remote storage.
The Cloud Pods command-line interface enables users to manage these remotes with ease, by following the instructions in the
&lt;a href="https://docs.localstack.cloud/user-guide/state-management/cloud-pods/#remotes">documentation&lt;/a>.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Cloud Pods play a crucial role in team collaboration, significantly speeding up development processes. The multiple and
versatile options for remote storage can support different business requirements for companies that prefer using the
environments they control. Cloud Pods are not just for teamwork; they also excel in other areas, such as creating
resources in Continuous Integration (CI) for ultra-fast testing pipelines.&lt;/p>
&lt;h2 id="additional-resources">Additional resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.localstack.cloud/user-guide/state-management/cloud-pods/">Cloud Pods documentation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.hashicorp.com/terraform/tutorials/aws-get-started">Terraform for AWS&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Tutorials: Chaos Engineering: Running Experiments with Fault Injection Service</title><link>/tutorials/fault-injection-service-experiments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/fault-injection-service-experiments/</guid><description>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Fault Injection Simulator (FIS) is a service designed for conducting controlled chaos engineering tests on AWS infrastructure. Its purpose is to uncover vulnerabilities and improve system robustness. FIS offers a means to deliberately introduce failures and observe their impacts, helping developers to better equip their systems against actual outages. To read about the FIS service, refer to the dedicated &lt;a href="https://docs.localstack.cloud/user-guide/aws/fis/">FIS documentation&lt;/a>.&lt;/p>
&lt;h2 id="getting-started">Getting started&lt;/h2>
&lt;p>This tutorial is designed for users new to the Fault Injection Simulator and assumes basic knowledge of the AWS CLI and our
&lt;a href="https://github.com/localstack/awscli-local">&lt;code>awslocal&lt;/code>&lt;/a> wrapper script. In this example, we will use the FIS to create controlled outages in a DynamoDB database. The aim is to test the software&amp;rsquo;s behavior and error handling capabilities.&lt;/p>
&lt;p>For this particular example, we&amp;rsquo;ll be using a &lt;a href="https://github.com/localstack-samples/samples-chaos-engineering/tree/main/FIS-experiments">sample application repository&lt;/a>. Clone the repository, and follow the instructions below to get started.&lt;/p>
&lt;h3 id="prerequisites">Prerequisites&lt;/h3>
&lt;p>The general prerequisites for this guide are:&lt;/p>
&lt;ul>
&lt;li>LocalStack Pro with &lt;a href="/getting-started/auth-token/">LocalStack Auth Token&lt;/a>&lt;/li>
&lt;li>&lt;a href="/user-guide/integrations/aws-cli/">AWS CLI&lt;/a> with the &lt;a href="/user-guide/integrations/aws-cli/#localstack-aws-cli-awslocal">&lt;code>awslocal&lt;/code> wrapper&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.docker.com/get-docker/">Docker&lt;/a> and &lt;a href="https://docs.docker.com/compose/install/">Docker Compose&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Start LocalStack by using the &lt;code>docker-compose.yml&lt;/code> file from the repository. Ensure to set your Auth Token as an environment variable during this process. The cloud resources will be automatically created upon the LocalStack start.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>LOCALSTACK_AUTH_TOKEN=&amp;lt;YOUR_LOCALSTACK_AUTH_TOKEN&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>docker compose up&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="application-architecture">Application Architecture&lt;/h3>
&lt;p>The following diagram shows the architecture that this application builds and deploys:&lt;/p>
&lt;figure>
&lt;img src="/tutorials/fault-injection-service-experiments/fis-experiment-1.png" width="800"/>
&lt;/figure>
&lt;h3 id="creating-an-experiment-template">Creating an experiment template&lt;/h3>
&lt;p>Before starting any FIS experiments, it&amp;rsquo;s important to verify that our application is functioning correctly. Start by creating an entity and saving it. To do this, use &lt;code>cURL&lt;/code> to call the API Gateway endpoint for the POST method:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>curl --location &amp;#39;http://12345.execute-api.localhost.localstack.cloud:4566/dev/productApi&amp;#39; \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--header &amp;#39;Content-Type: application/json&amp;#39; \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--data &amp;#39;{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;id&amp;#34;: &amp;#34;prod-2004&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;name&amp;#34;: &amp;#34;Ultimate Gadget&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;price&amp;#34;: &amp;#34;49.99&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;description&amp;#34;: &amp;#34;The Ultimate Gadget is the perfect tool for tech enthusiasts looking for the next level in gadgetry. Compact, powerful, and loaded with features.&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;div class="disable-copy">
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Product added/updated successfully.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/div>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>You can use the file named &lt;code>experiment-ddb.json&lt;/code> that contains the FIS experiment configuration. This file will be used in the upcoming call to the &lt;a href="https://docs.aws.amazon.com/fis/latest/APIReference/API_CreateExperimentTemplate.html">&lt;code>CreateExperimentTemplate&lt;/code>&lt;/a> API within the FIS resource.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cat experiment-ddb.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;actions&amp;#34;&lt;/span>: &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Test action 1&amp;#34;&lt;/span>: &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;actionId&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;localstack:generic:api-error&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;parameters&amp;#34;&lt;/span>: &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;service&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;dynamodb&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;api&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;all&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;percentage&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;100&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;exception&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;DynamoDbException&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;errorCode&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;500&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;description&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;Template for interfering with the DynamoDB service&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;stopConditions&amp;#34;&lt;/span>: &lt;span style="color:#ce5c00;font-weight:bold">[{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;none&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">}]&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;roleArn&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;arn:aws:iam:000000000000:role/ExperimentRole&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This template is designed to target all APIs of the DynamoDB resource. While it&amp;rsquo;s possible to specify particular operations like &lt;code>PutItem&lt;/code> or &lt;code>GetItem&lt;/code>, the objective here is to entirely disconnect the database.&lt;/p>
&lt;p>As a result, this configuration will cause all API calls to fail with a 100% failure rate, each resulting in an HTTP 500 status code and a &lt;code>DynamoDbException&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal fis create-experiment-template --cli-input-json file://experiment-ddb.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;div class="disable-copy">
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;experimentTemplate&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;id&amp;#34;: &amp;#34;895591e8-11e6-44c4-adc3-86592010562b&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;description&amp;#34;: &amp;#34;Template for interfering with the DynamoDB service&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;actions&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Test action 1&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;actionId&amp;#34;: &amp;#34;localstack:generic:api-error&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;parameters&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;service&amp;#34;: &amp;#34;dynamodb&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;api&amp;#34;: &amp;#34;all&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;percentage&amp;#34;: &amp;#34;100&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;exception&amp;#34;: &amp;#34;DynamoDbException&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;errorCode&amp;#34;: &amp;#34;500&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;stopConditions&amp;#34;: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;source&amp;#34;: &amp;#34;none&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;creationTime&amp;#34;: 1699308754.415716,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;lastUpdateTime&amp;#34;: 1699308754.415716,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;roleArn&amp;#34;: &amp;#34;arn:aws:iam:000000000000:role/ExperimentRole&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/div>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Take note of the &lt;code>id&lt;/code> field in the response. This is the ID of the experiment template that will be used in the next step.&lt;/p>
&lt;h3 id="starting-the-experiment">Starting the experiment&lt;/h3>
&lt;p>Following the creation of the experiment template, you can create a new experiment using the template&amp;rsquo;s ID.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal fis start-experiment --experiment-template-id &amp;lt;EXPERIMENT_TEMPLATE_ID&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;div class="disable-copy">
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;experiment&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;id&amp;#34;: &amp;#34;1b1238fd-316d-4956-93e7-5ada677a6f69&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;experimentTemplateId&amp;#34;: &amp;#34;895591e8-11e6-44c4-adc3-86592010562b&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;roleArn&amp;#34;: &amp;#34;arn:aws:iam:000000000000:role/ExperimentRole&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;state&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;status&amp;#34;: &amp;#34;running&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;actions&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Test action 1&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;actionId&amp;#34;: &amp;#34;localstack:generic:api-error&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;parameters&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;service&amp;#34;: &amp;#34;dynamodb&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;api&amp;#34;: &amp;#34;all&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;percentage&amp;#34;: &amp;#34;100&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;exception&amp;#34;: &amp;#34;DynamoDbException&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;errorCode&amp;#34;: &amp;#34;500&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;stopConditions&amp;#34;: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;source&amp;#34;: &amp;#34;none&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;creationTime&amp;#34;: 1699308823.74327,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;startTime&amp;#34;: 1699308823.74327
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/div>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Replace the &lt;code>&amp;lt;EXPERIMENT_TEMPLATE_ID&amp;gt;&lt;/code> placeholder with the ID of the experiment template that was created in the previous step.&lt;/p>
&lt;h3 id="simulating-an-outage">Simulating an outage&lt;/h3>
&lt;p>Once the experiment starts, the database becomes inaccessible. This means users cannot retrieve or add new products, resulting in the API Gateway returning an Internal Server Error. Downtime and data loss are critical issues to avoid in enterprise applications.&lt;/p>
&lt;p>Fortunately, encountering this issue early in the development phase allows developers to implement effective error handling and develop mechanisms to prevent data loss during a database outage.&lt;/p>
&lt;p>It&amp;rsquo;s important to note that this approach is not limited to DynamoDB; outages can be simulated for any storage resource.&lt;/p>
&lt;h3 id="setting-up-a-solution">Setting up a solution&lt;/h3>
&lt;figure>
&lt;img src="/tutorials/fault-injection-service-experiments/fis-experiment-2.png" width="800"/>
&lt;/figure>
&lt;p>A possible solution involves setting up an SNS topic, an SQS queue, and a Lambda function. The Lambda function will be responsible for retrieving queued items and attempting to re-execute the &lt;code>PutItem&lt;/code> operation on the database. If DynamoDB remains unavailable, the item will be placed back in the queue for a later retry.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>curl --location &amp;#39;http://12345.execute-api.localhost.localstack.cloud:4566/dev/productApi&amp;#39; \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--header &amp;#39;Content-Type: application/json&amp;#39; \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--data &amp;#39;{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;id&amp;#34;: &amp;#34;prod-1003&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;name&amp;#34;: &amp;#34;Super Widget&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;price&amp;#34;: &amp;#34;29.99&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;description&amp;#34;: &amp;#34;A versatile widget that can be used for a variety of purposes. Durable, reliable, and affordable.&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;div class="disable-copy">
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>A DynamoDB error occurred. Message sent to queue.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/div>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>If we review the logs, it will show that the &lt;code>DynamoDbException&lt;/code> has been managed effectively.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>2023-11-06T22:21:40.789 DEBUG --- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> asgi_gw_2&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> l.services.fis.handler : FIS handler called with configs: &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;dynamodb&amp;#39;&lt;/span>: &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>None: &lt;span style="color:#ce5c00;font-weight:bold">[(&lt;/span>100, &lt;span style="color:#4e9a06">&amp;#39;DynamoDbException&amp;#39;&lt;/span>, &lt;span style="color:#4e9a06">&amp;#39;500&amp;#39;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)]}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-11-06T22:21:40.789 INFO --- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> asgi_gw_2&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> localstack.request.aws : AWS dynamodb.PutItem &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;gt; &lt;span style="color:#0000cf;font-weight:bold">500&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>DynamoDbException&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-11-06T22:21:40.834 DEBUG --- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> asgi_gw_4&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> l.services.sns.publisher : Topic &lt;span style="color:#4e9a06">&amp;#39;arn:aws:sns:us-east-1:000000000000:ProductEventsTopic&amp;#39;&lt;/span> publishing &lt;span style="color:#4e9a06">&amp;#39;5520d37a-fc21-4a73-b1bf-f9b9afce5908&amp;#39;&lt;/span> to subscribed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&amp;#39;arn:aws:sqs:us-east-1:000000000000:ProductEventsQueue&amp;#39;&lt;/span> with protocol &lt;span style="color:#4e9a06">&amp;#39;sqs&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>subscription &lt;span style="color:#4e9a06">&amp;#39;arn:aws:sns:us-east-1:000000000000:ProductEventsTopic:0a4abf8c-744a-404a-9ff9-f132e25d1b30&amp;#39;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This element will remain in the queue until the outage is resolved.&lt;/p>
&lt;h3 id="stopping-the-experiment">Stopping the experiment&lt;/h3>
&lt;p>To stop the experiment, use the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal fis stop-experiment --id &amp;lt;EXPERIMENT_ID&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;div class="disable-copy">
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;experiment&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;id&amp;#34;: &amp;#34;1b1238fd-316d-4956-93e7-5ada677a6f69&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;experimentTemplateId&amp;#34;: &amp;#34;895591e8-11e6-44c4-adc3-86592010562b&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;roleArn&amp;#34;: &amp;#34;arn:aws:iam:000000000000:role/ExperimentRole&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;state&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;status&amp;#34;: &amp;#34;stopped&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;actions&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Test action 1&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;actionId&amp;#34;: &amp;#34;localstack:generic:api-error&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;parameters&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;service&amp;#34;: &amp;#34;dynamodb&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;api&amp;#34;: &amp;#34;all&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;percentage&amp;#34;: &amp;#34;100&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;exception&amp;#34;: &amp;#34;DynamoDbException&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;errorCode&amp;#34;: &amp;#34;500&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;startTime&amp;#34;: 1699308823.750742,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;endTime&amp;#34;: 1699309736.259625
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;stopConditions&amp;#34;: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;source&amp;#34;: &amp;#34;none&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;creationTime&amp;#34;: 1699308823.74327,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;startTime&amp;#34;: 1699308823.74327,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;endTime&amp;#34;: 1699309736.259646
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/div>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Replace the &lt;code>&amp;lt;EXPERIMENT_ID&amp;gt;&lt;/code> placeholder with the ID of the experiment that was created in the previous step.&lt;/p>
&lt;p>The experiment has been terminated, allowing the Product that initially failed to reach the database to finally be stored successfully. This can be confirmed by scanning the database.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal dynamodb scan --table-name Products
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;div class="disable-copy">
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Items&amp;#34;: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;name&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;S&amp;#34;: &amp;#34;Super Widget&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;description&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;S&amp;#34;: &amp;#34;A versatile widget that can be used for a variety of purposes. Durable, reliable, and affordable.&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;id&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;S&amp;#34;: &amp;#34;prod-1003&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;price&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;N&amp;#34;: &amp;#34;29.99&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;name&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;S&amp;#34;: &amp;#34;Ultimate Gadget&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;description&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;S&amp;#34;: &amp;#34;The Ultimate Gadget is the perfect tool for tech enthusiasts looking for the next level in gadgetry. Compact, powerful, and loaded with features.&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;id&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;S&amp;#34;: &amp;#34;prod-2004&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;price&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;N&amp;#34;: &amp;#34;49.99&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Count&amp;#34;: 2,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;ScannedCount&amp;#34;: 2,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;ConsumedCapacity&amp;#34;: null
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/div>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="configuring-the-latency">Configuring the latency&lt;/h3>
&lt;p>The LocalStack FIS service can also introduce latency using the following experiment template:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;description&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;template for testing delays in API calls&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;actions&amp;#34;&lt;/span>: &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;latency&amp;#34;&lt;/span>: &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;actionId&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;localstack:generic:api-error&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;parameters&amp;#34;&lt;/span>: &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;latency&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;stopConditions&amp;#34;&lt;/span>: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;none&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;roleArn&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;arn:aws:iam:000000000000:role/ExperimentRole&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Save this template as &lt;code>latency-experiment.json&lt;/code> and use it to create an experiment definition through the FIS service:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal fis create-experiment-template --cli-input-json file://latency-experiment.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;div class="disable-copy">
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;experimentTemplate&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;id&amp;#34;: &amp;#34;966f5632-4e2c-4567-b99c-436c333e523f&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;description&amp;#34;: &amp;#34;template for testing delays in API calls&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;actions&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;latency&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;actionId&amp;#34;: &amp;#34;localstack:generic:api-error&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;parameters&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;latency&amp;#34;: &amp;#34;4&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;stopConditions&amp;#34;: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;source&amp;#34;: &amp;#34;none&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;creationTime&amp;#34;: 1699619228.208613,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;lastUpdateTime&amp;#34;: 1699619228.208613,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;roleArn&amp;#34;: &amp;#34;arn:aws:iam:000000000000:role/ExperimentRole&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/div>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal fis start-experiment --experiment-template-id &amp;lt;EXPERIMENT_TEMPLATE_ID&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Replace the &lt;code>&amp;lt;EXPERIMENT_TEMPLATE_ID&amp;gt;&lt;/code> placeholder with the ID of the experiment template that was created in the previous step.&lt;/p>
&lt;p>While the experiment is active, you can use the same sample stack to observe and understand the effects of a 4-second delay on each service call.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>curl --location &amp;#39;http://12345.execute-api.localhost.localstack.cloud:4566/dev/productApi&amp;#39; \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--header &amp;#39;Content-Type: application/json&amp;#39; \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--data &amp;#39;{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;id&amp;#34;: &amp;#34;prod-1088&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;name&amp;#34;: &amp;#34;Super Widget&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;price&amp;#34;: &amp;#34;29.99&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;description&amp;#34;: &amp;#34;A versatile widget that can be used for a variety of purposes. Durable, reliable, and affordable.&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;div class="disable-copy">
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>An error occurred (InternalError) when calling the GetResources operation (reached max retries: 4): Failing as per Fault Injection Simulator configuration
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/div>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Tutorials: Chaos Engineering: Route53 Failover with FIS</title><link>/tutorials/route53-failover-with-fis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/route53-failover-with-fis/</guid><description>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>LocalStack allows you to integrate &amp;amp; test &lt;a href="https://docs.localstack.cloud/user-guide/aws/fis/">Fault Injection Simulator (FIS)&lt;/a> with &lt;a href="https://docs.localstack.cloud/user-guide/aws/route53/">Route53&lt;/a> to automatically divert users to
a healthy secondary zone if the primary region fails, ensuring system availability and responsiveness. Route53&amp;rsquo;s health checks and
traffic redirection enhance architecture resilience and ensure service continuity during regional outages, crucial for uninterrupted
user experiences.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Route53 Failover with FIS is currently available as part of the &lt;strong>LocalStack Enterprise&lt;/strong> plan. If you&amp;rsquo;d like to try it out,
please &lt;a href="https://www.localstack.cloud/demo">contact us&lt;/a> to request access.
&lt;/div>
&lt;h2 id="getting-started">Getting started&lt;/h2>
&lt;p>This tutorial is designed for users new to the Route53 and FIS services. In this example, there&amp;rsquo;s an active-primary and
passive-standby configuration. Route53 routes traffic to the primary region, which processes product-related requests through
API Gateway and Lambda functions, with data stored in DynamoDB. If the primary region fails, Route53 redirects to the standby
region, maintained in sync by a replication Lambda function.&lt;/p>
&lt;p>For this particular example, we&amp;rsquo;ll be using a &lt;a href="https://github.com/localstack-samples/samples-chaos-engineering/tree/main/route53-failover">sample application repository&lt;/a>. Clone the repository, and follow the
instructions below to get started.&lt;/p>
&lt;h3 id="prerequisites">Prerequisites&lt;/h3>
&lt;p>The general prerequisites for this guide are:&lt;/p>
&lt;ul>
&lt;li>LocalStack Pro with &lt;a href="/getting-started/auth-token/">LocalStack Auth Token&lt;/a>&lt;/li>
&lt;li>&lt;a href="/user-guide/integrations/aws-cli/">AWS CLI&lt;/a> with the &lt;a href="/user-guide/integrations/aws-cli/#localstack-aws-cli-awslocal">&lt;code>awslocal&lt;/code> wrapper&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.docker.com/get-docker/">Docker&lt;/a> and &lt;a href="https://docs.docker.com/compose/install/">Docker Compose&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.python.org/downloads/">Python-3&lt;/a>&lt;/li>
&lt;li>&lt;code>dig&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Start LocalStack by using the &lt;code>docker-compose.yml&lt;/code> file from the repository. Ensure to set your Auth Token as an environment variable
during this process.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>LOCALSTACK_AUTH_TOKEN=&amp;lt;YOUR_LOCALSTACK_AUTH_TOKEN&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>docker compose up&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="application-architecture">Application Architecture&lt;/h3>
&lt;p>The following diagram shows the architecture that this application builds and deploys:&lt;/p>
&lt;figure>
&lt;img src="/tutorials/route53-failover-with-fis/route53-failover-1.png" width="800"/>
&lt;/figure>
&lt;h3 id="creating-the-resources">Creating the resources&lt;/h3>
&lt;p>To begin, deploy the same services in both &lt;code>us-west-1&lt;/code> and &lt;code>us-east-1&lt;/code> regions. The resources specified in the &lt;code>init-resources.sh&lt;/code>
file will be created when the LocalStack container starts, using Initialization Hooks and the &lt;code>awslocal&lt;/code> CLI tool.&lt;/p>
&lt;p>The objective is to have a backup system in case of a regional outage in the primary availability zone (&lt;code>us-west-1&lt;/code>). We&amp;rsquo;ll focus
on this region to examine the existing resilience mechanisms.&lt;/p>
&lt;figure>
&lt;img src="/tutorials/route53-failover-with-fis/route53-failover-2.png" width="800"/>
&lt;/figure>
&lt;ul>
&lt;li>The primary API Gateway includes a health check endpoint that returns a 200 HTTP status code, serving as a basic check for its availability.&lt;/li>
&lt;li>Data synchronization across regions can be achieved with AWS-native tools like DynamoDB Streams and AWS Lambda. Here, any changes to the
primary table trigger a Lambda function, replicating these changes to a secondary table. This configuration is essential for high availability
and disaster recovery.&lt;/li>
&lt;/ul>
&lt;h3 id="configuring-a-route53-hosted-zone">Configuring a Route53 hosted zone&lt;/h3>
&lt;p>Let&amp;rsquo;s begin by setting up a hosted zone in Route53 named &lt;code>hello-localstack.com&lt;/code> and retrieved the hosted zone ID:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>HOSTED_ZONE_NAME=hello-localstack.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>HOSTED_ZONE_ID=$(awslocal route53 create-hosted-zone --name $HOSTED_ZONE_NAME --caller-reference foo | jq -r .HostedZone.Id)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Then, define the health check ID for the API Gateway available in the &lt;code>us-west-1&lt;/code> region:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>HEALTH_CHECK_ID=$(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>awslocal route53 create-health-check \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--caller-reference foobar \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--health-check-config &amp;#39;{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;FullyQualifiedDomainName&amp;#34;: &amp;#34;12345.execute-api.localhost.localstack.cloud&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Port&amp;#34;: 4566,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;ResourcePath&amp;#34;: &amp;#34;/dev/healthcheck&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Type&amp;#34;: &amp;#34;HTTP&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;RequestInterval&amp;#34;: 10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&amp;#39; | jq -r .HealthCheck.Id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>This command creates a Route 53 health check for an HTTP endpoint (&lt;code>12345.execute-api.localhost.localstack.cloud:4566/dev/healthcheck&lt;/code>)
with a 10-second request interval and captures the health check&amp;rsquo;s ID. The caller reference identifier in AWS resource creation or updates
prevents accidental duplication if requests are repeated.&lt;/p>
&lt;p>To update DNS records in the specified Route53 hosted zone (&lt;code>$HOSTED_ZONE_ID&lt;/code>), add two CNAME records: &lt;code>12345.$HOSTED_ZONE_NAME&lt;/code>
pointing to &lt;code>12345.execute-api.localhost.localstack.cloud&lt;/code>, and &lt;code>67890.$HOSTED_ZONE_NAME&lt;/code> pointing to &lt;code>67890.execute-api.localhost.localstack.cloud&lt;/code>.
Set a TTL (Time to Live) of 60 seconds for these records.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal route53 change-resource-record-sets \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--hosted-zone $HOSTED_ZONE_ID \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--change-batch &amp;#39;{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Changes&amp;#34;: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Action&amp;#34;: &amp;#34;CREATE&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;ResourceRecordSet&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Name&amp;#34;: &amp;#34;12345.&amp;#39;$HOSTED_ZONE_NAME&amp;#39;&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Type&amp;#34;: &amp;#34;CNAME&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;TTL&amp;#34;: 60,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;ResourceRecords&amp;#34;: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&amp;#34;Value&amp;#34;: &amp;#34;12345.execute-api.localhost.localstack.cloud&amp;#34;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Action&amp;#34;: &amp;#34;CREATE&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;ResourceRecordSet&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Name&amp;#34;: &amp;#34;67890.&amp;#39;$HOSTED_ZONE_NAME&amp;#39;&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Type&amp;#34;: &amp;#34;CNAME&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;TTL&amp;#34;: 60,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;ResourceRecords&amp;#34;: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&amp;#34;Value&amp;#34;: &amp;#34;67890.execute-api.localhost.localstack.cloud&amp;#34;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&amp;#39;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Finally, we&amp;rsquo;ll update the DNS records in the Route53 hosted zone identified by &lt;strong>&lt;code>$HOSTED_ZONE_ID&lt;/code>&lt;/strong>. We&amp;rsquo;re adding two CNAME records
for the subdomain &lt;code>test.$HOSTED_ZONE_NAME&lt;/code>. The first record points to &lt;code>12345.$HOSTED_ZONE_NAME&lt;/code> and is linked with the earlier created
health check, designated as the primary failover target. The second record points to &lt;code>67890.$HOSTED_ZONE_NAME&lt;/code> and is set as the secondary
failover target.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal route53 change-resource-record-sets \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--hosted-zone-id $HOSTED_ZONE_ID \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--change-batch &amp;#39;{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Changes&amp;#34;: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Action&amp;#34;: &amp;#34;CREATE&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;ResourceRecordSet&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Name&amp;#34;: &amp;#34;test.&amp;#39;$HOSTED_ZONE_NAME&amp;#39;&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Type&amp;#34;: &amp;#34;CNAME&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;SetIdentifier&amp;#34;: &amp;#34;12345&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;AliasTarget&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;HostedZoneId&amp;#34;: &amp;#34;&amp;#39;$HOSTED_ZONE_ID&amp;#39;&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;DNSName&amp;#34;: &amp;#34;12345.&amp;#39;$HOSTED_ZONE_NAME&amp;#39;&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;EvaluateTargetHealth&amp;#34;: true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;HealthCheckId&amp;#34;: &amp;#34;&amp;#39;$HEALTH_CHECK_ID&amp;#39;&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Failover&amp;#34;: &amp;#34;PRIMARY&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Action&amp;#34;: &amp;#34;CREATE&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;ResourceRecordSet&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Name&amp;#34;: &amp;#34;test.&amp;#39;$HOSTED_ZONE_NAME&amp;#39;&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Type&amp;#34;: &amp;#34;CNAME&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;SetIdentifier&amp;#34;: &amp;#34;67890&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;AliasTarget&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;HostedZoneId&amp;#34;: &amp;#34;&amp;#39;$HOSTED_ZONE_ID&amp;#39;&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;DNSName&amp;#34;: &amp;#34;67890.&amp;#39;$HOSTED_ZONE_NAME&amp;#39;&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;EvaluateTargetHealth&amp;#34;: true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Failover&amp;#34;: &amp;#34;SECONDARY&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&amp;#39;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>This setup represents the basic failover configuration where traffic is redirected to different endpoints based on their health check
status. To confirm that the CNAME record for &lt;code>test.hello-localstack.com&lt;/code> points to &lt;code>12345.execute-api.localhost.localstack.cloud&lt;/code>,
you can use the following &lt;code>dig&lt;/code> command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>dig @localhost test.hello-localstack.com CNAME
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;div class="disable-copy">
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.....
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>;; QUESTION SECTION:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>;test.hello-localstack.com. IN CNAME
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>;; ANSWER SECTION:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>test.hello-localstack.com. 300 IN CNAME 12345.execute-api.localhost.localstack.cloud.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.....
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/div>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="creating-a-controlled-outage">Creating a controlled outage&lt;/h3>
&lt;p>Our setup is now complete and ready for testing. To mimic a regional outage in the &lt;code>us-west-1&lt;/code> region, we&amp;rsquo;ll conduct an experiment that
halts all service invocations in this region, including the health check function. Once the primary region becomes non-functional,
Route 53&amp;rsquo;s health checks will fail. This failure will activate the failover policy, redirecting traffic to the corresponding services
in the secondary region, thus maintaining service continuity.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>cat region-outage-experiment.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;div class="disable-copy">
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;description&amp;#34;: &amp;#34;template for internal server error for few regions i.e. us-west-1&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;actions&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;regionUnavailable-us-west-1&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;actionId&amp;#34;: &amp;#34;localstack:generic:api-error&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;parameters&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;region&amp;#34;: &amp;#34;us-west-1&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;errorCode&amp;#34;: &amp;#34;503&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;stopConditions&amp;#34;: [],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;roleArn&amp;#34;: &amp;#34;arn:aws:iam:000000000000:role/ExperimentRole&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/div>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>This Fault Injection Simulator (FIS) experiment template is set up to mimic a &lt;code>Service Unavailable&lt;/code> (503 error) in the &lt;code>us-west-1&lt;/code> region.
To create the experiment template, use the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal fis create-experiment-template --cli-input-json file://region-outage-experiment.json&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Once the template is created, start the experiment using its ID:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal fis start-experiment --experiment-template-id &amp;lt;EXPERIMENT_TEMPLATE_ID&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;div class="disable-copy">
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;experiment&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;id&amp;#34;: &amp;#34;651b5196-b244-4a8b-8ab6-d7b9e13998a0&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;experimentTemplateId&amp;#34;: &amp;#34;d3a1a31b-c52e-49ec-8387-8f5eb75a11df&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;roleArn&amp;#34;: &amp;#34;arn:aws:iam:000000000000:role/ExperimentRole&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;state&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;status&amp;#34;: &amp;#34;running&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;actions&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;regionUnavailable-us-east-1&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;actionId&amp;#34;: &amp;#34;localstack:generic:api-error&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;parameters&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;region&amp;#34;: &amp;#34;us-west-1&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;errorCode&amp;#34;: &amp;#34;503&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;stopConditions&amp;#34;: [],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;creationTime&amp;#34;: 1699902569.439826,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;startTime&amp;#34;: 1699902569.439826
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/div>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Replace &lt;code>&amp;lt;EXPERIMENT_TEMPLATE_ID&amp;gt;&lt;/code> with the ID of the experiment template created in the previous step. When the experiment is active,
Route 53&amp;rsquo;s health checks will detect the failure and redirect traffic to the standby region as per the failover setup. Confirm this redirection with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>dig @localhost test.hello-localstack.com CNAME
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;div class="disable-copy">
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.....
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>;; QUESTION SECTION:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>;test.hello-localstack.com. IN CNAME
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>;; ANSWER SECTION:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>test.hello-localstack.com. 300 IN CNAME 67890.execute-api.localhost.localstack.cloud.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.....
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/div>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>This indicates that the hosted zone name now points to the secondary API Gateway, and &lt;code>us-east-1&lt;/code> services are in use.&lt;/p>
&lt;p>A Python script can simulate backend handling of this switch:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">dns.resolver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">requests&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Set the Route53 DNS resolver to use&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">dns_resolver_ip&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;127.0.0.1&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Domain to resolve&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">domain_to_resolve&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;test.hello-localstack.com&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Resolve the CNAME record using the specified DNS server&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">resolver&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">dns&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">resolver&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Resolver&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">configure&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">False&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">resolver&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">nameservers&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">dns_resolver_ip&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">try&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">cname_record&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">resolver&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">query&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">domain_to_resolve&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">rdtype&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">dns&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">rdatatype&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">CNAME&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">resolved_domain&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">str&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">cname_record&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">target&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic"># Construct the full URL with the resolved domain&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">resolved_url&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">f&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;http://&lt;/span>&lt;span style="color:#4e9a06">{&lt;/span>&lt;span style="color:#000">resolved_domain&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">:4566/dev/productApi?id=prod-1088&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic"># Make an HTTP request to the resolved URL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">response&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">requests&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">resolved_url&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic"># Print the response&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">response&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">text&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">except&lt;/span> &lt;span style="color:#000">dns&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">resolver&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NXDOMAIN&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">f&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;CNAME record not found for &lt;/span>&lt;span style="color:#4e9a06">{&lt;/span>&lt;span style="color:#000">domain_to_resolve&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">except&lt;/span> &lt;span style="color:#c00;font-weight:bold">Exception&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">f&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Error: &lt;/span>&lt;span style="color:#4e9a06">{&lt;/span>&lt;span style="color:#000">e&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Running the script will resolve the CNAME record for &amp;rsquo;test.hello-localstack.com&amp;rsquo;, make an HTTP request to the resolved URL, and print the response, which fetches a Product object from DynamoDB in the &lt;code>us-east-1&lt;/code> region.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>python3 dns-resolver.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;div class="disable-copy">
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s{&amp;#34;price&amp;#34;:&amp;#34;29.99&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;Super Widget&amp;#34;,&amp;#34;description&amp;#34;:&amp;#34;A versatile widget that can be used for a variety of purposes.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Durable, reliable, and affordable.&amp;#34;,&amp;#34;id&amp;#34;:&amp;#34;prod-1088&amp;#34;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/div>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The LocalStack logs will confirm which API Gateway was called based on the resolved domain.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>2023-11-07T11:59:28.292 DEBUG --- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> asgi_gw_9&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> l.s.l.i.version_manager : &amp;gt; &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>resource: /productApi,path: /productApi,httpMethod: GET,headers: &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#000">Host&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>67890.execute-api.localhost.localstack.cloud:4566,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User-Agent&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>python-requests/2.31.0, accept-encoding&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>gzip, deflate, &lt;span style="color:#000">accept&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>*/*, &lt;span style="color:#000">Connection&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>keep-alive, x-localstack-tgt-api&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>apigateway ....
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Tutorials: Chaos Engineering: Simulating outages in your application stack</title><link>/tutorials/simulating-outages-in-your-application-stack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/simulating-outages-in-your-application-stack/</guid><description>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>&lt;a href="https://pypi.org/project/localstack-extension-outages/">LocalStack Outages Extension&lt;/a> can simulate outages for any AWS region or service. You can install and use the Outages Extension through &lt;a href="https://docs.localstack.cloud/user-guide/extensions/">LocalStack Extension mechanism&lt;/a> to test infrastructure resilience by intentionally causing service outages and observing the system&amp;rsquo;s recovery in scenarios with incomplete infrastructure is an effective approach. This method evaluates the system&amp;rsquo;s deployment mechanisms and its ability to handle and recover from infrastructure anomalies, a critical aspect of chaos engineering.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Outages Extension is currently available as part of the &lt;strong>LocalStack Enterprise&lt;/strong> plan. If you&amp;rsquo;d like to try it out, please &lt;a href="https://www.localstack.cloud/demo">contact us&lt;/a> to request access.
&lt;/div>
&lt;h2 id="getting-started">Getting started&lt;/h2>
&lt;p>This guide is designed for users who are new to Outages Extension. We&amp;rsquo;ll simulate partial outages by interrupting specific services, such as halting an ECS instance creation or disrupting a database service. By closely watching Terraform&amp;rsquo;s responses and the status of AWS resources, you&amp;rsquo;ll learn how Terraform manages these disruptions.&lt;/p>
&lt;p>For this particular example, we&amp;rsquo;ll be using a Terraform configuration file from a &lt;a href="https://github.com/localstack-samples/samples-chaos-engineering/tree/main/extension-outages">sample application repository&lt;/a>. Clone the repository, and follow the instructions below to get started.&lt;/p>
&lt;h3 id="prerequisites">Prerequisites&lt;/h3>
&lt;p>The general prerequisites for this guide are:&lt;/p>
&lt;ul>
&lt;li>LocalStack Pro with &lt;a href="https://docs.localstack.cloud/getting-started/installation/#localstack-cli">LocalStack CLI&lt;/a> &amp;amp; &lt;a href="https://docs.localstack.cloud/getting-started/auth-token/">LocalStack Auth Token&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.localstack.cloud/user-guide/integrations/aws-cli/">AWS CLI&lt;/a> with the &lt;a href="https://docs.localstack.cloud/user-guide/integrations/aws-cli/#localstack-aws-cli-awslocal">&lt;code>awslocal&lt;/code> wrapper&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.docker.com/get-docker/">Docker&lt;/a> and &lt;a href="https://docs.docker.com/compose/install/">Docker Compose&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.terraform.io/downloads.html">Terraform&lt;/a> and &lt;a href="https://docs.localstack.cloud/user-guide/integrations/terraform/#tflocal-wrapper-script">&lt;code>tflocal&lt;/code> wrapper&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>Start LocalStack by using the &lt;code>docker-compose.yml&lt;/code> file from the repository. Ensure to set your Auth Token as an environment variable during this process.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>LOCALSTACK_AUTH_TOKEN=&amp;lt;YOUR_LOCALSTACK_AUTH_TOKEN&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>docker compose up&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="installing-the-extension">Installing the extension&lt;/h3>
&lt;p>To install the LocalStack Outages Extension, first set up your LocalStack Auth Token in your environment. Once the token is configured, use the command below to install the extension:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack extensions install localstack-extension-outages&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Alternatively, you can enable automatic installation of the extension by setting the environment variable &lt;code>EXTENSION_AUTO_INSTALL=localstack-extension-outages&lt;/code> when you start the LocalStack container. This can be done by including it in your &lt;code>docker&lt;/code> command line interface (CLI) or in your &lt;code>docker-compose&lt;/code> configuration as an environment variable.&lt;/p>
&lt;p>Follow our &lt;a href="https://docs.localstack.cloud/user-guide/extensions/managing-extensions/">Managing Extensions documentation&lt;/a> for more information on how to install &amp;amp; manage extensions.&lt;/p>
&lt;h3 id="running-terraform">Running Terraform&lt;/h3>
&lt;p>To get started, initialize &amp;amp; apply the Terraform configuration using the &lt;code>tflocal&lt;/code> CLI to create the local resources. The Terraform configuration file operates independently of the application, meaning the application won&amp;rsquo;t be available during this phase. To deploy the entire stack, including the application, refer to the &lt;a href="https://github.com/localstack-samples/sample-terraform-ecs-apigateway">sample repository&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>tflocal init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>tflocal plan
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>tflocal apply&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The following output would be retrieved:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Apply complete! Resources: &lt;span style="color:#0000cf;font-weight:bold">57&lt;/span> added, &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> changed, &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> destroyed.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Outputs:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">api_id&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;3eed6d1d&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">api_invoke_url&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;https://3eed6d1d.execute-api.us-east-1.amazonaws.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">api_invoke_url_foodstore_foods&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;https://3eed6d1d.execute-api.us-east-1.amazonaws.com/foodstore/foods/{foodId}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">api_invoke_url_petstore_pets&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;https://3eed6d1d.execute-api.us-east-1.amazonaws.com/petstore/domestic/pets/{petId}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">api_test_page&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &amp;lt;sensitive&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">container_security_group&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;sg-db749514a062de41c&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">ecs_cluster_name&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;arn:aws:ecs:us-east-1:000000000000:cluster/ecs-cluster&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">private_dns_namespace&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;60bfac90&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">vpc_id&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;vpc-f9d6b124&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next, you can update certain resources. This includes increasing the number of tasks in the &lt;code>task_definition&lt;/code> for the ECS service from 3 to 5 and upgrading the &lt;code>openapi&lt;/code> specification version used by API Gateway from 3.0.1 to 3.1.0.&lt;/p>
&lt;h3 id="simulating-outages">Simulating outages&lt;/h3>
&lt;p>After running the Terraform &lt;code>plan&lt;/code> command to preview these changes, you can simulate an outage affecting the ECS and API Gateway V2 services before applying the changes. To do this, execute the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>curl --location --request POST &amp;#39;http://outages.localhost.localstack.cloud:4566/outages&amp;#39; \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--header &amp;#39;Content-Type: application/json&amp;#39; \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--data-raw &amp;#39;[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;service&amp;#34;: &amp;#34;ecs&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;region&amp;#34;: &amp;#34;us-east-1&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;service&amp;#34;: &amp;#34;apigatewayv2&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;region&amp;#34;: &amp;#34;us-east-1&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]&amp;#39;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>In the LocalStack logs, you&amp;rsquo;ll notice that during the periods between successful calls, the controlled outages are marked by a &lt;code>ServiceUnavailableException&lt;/code> accompanied by a 503 HTTP status code. These exceptions specifically affect the targeted AWS APIs.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>2023-11-09T21:53:31.801 INFO --- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> asgi_gw_9&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> localstack.request.aws : AWS ec2.GetTransitGatewayRouteTableAssociations &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;gt; &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-11-09T21:53:31.824 INFO --- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> asgi_gw_2&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> localstack.request.aws : AWS apigatewayv2.GetVpcLink &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;gt; &lt;span style="color:#0000cf;font-weight:bold">503&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>ServiceUnavailableException&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-11-09T21:53:31.828 INFO --- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> asgi_gw_6&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> localstack.request.aws : AWS servicediscovery.ListTagsForResource &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;gt; &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-11-09T21:53:31.831 INFO --- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> asgi_gw_8&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> localstack.request.aws : AWS ec2.DescribeRouteTables &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;gt; &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-11-09T21:53:31.834 INFO --- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> asgi_gw_7&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> localstack.request.aws : AWS servicediscovery.ListTagsForResource &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;gt; &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-11-09T21:53:31.836 INFO --- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> asgi_gw_0&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> localstack.request.aws : AWS ec2.DescribePrefixLists &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;gt; &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-11-09T21:53:31.842 INFO --- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> asgi_gw_1&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> localstack.request.aws : AWS ec2.DescribeSecurityGroups &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;gt; &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-11-09T21:53:31.848 INFO --- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> asgi_gw_6&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> localstack.request.aws : AWS ec2.GetTransitGatewayRouteTablePropagations &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;gt; &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-11-09T21:53:31.876 INFO --- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> asgi_gw_9&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> localstack.request.aws : AWS ec2.DescribeRouteTables &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;gt; &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-11-09T21:53:31.879 INFO --- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> asgi_gw_5&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> localstack.request.aws : AWS ec2.DescribeRouteTables &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;gt; &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-11-09T21:53:32.205 INFO --- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> asgi_gw_8&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> localstack.request.aws : AWS ecs.DescribeClusters &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;gt; &lt;span style="color:#0000cf;font-weight:bold">503&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>ServiceUnavailableException&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-11-09T21:53:32.280 INFO --- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> asgi_gw_3&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> localstack.request.aws : AWS ecs.DescribeTaskDefinition &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;gt; &lt;span style="color:#0000cf;font-weight:bold">503&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>ServiceUnavailableException&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-11-09T21:53:32.443 INFO --- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> asgi_gw_0&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> localstack.request.aws : AWS ecs.DescribeTaskDefinition &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;gt; &lt;span style="color:#0000cf;font-weight:bold">503&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>ServiceUnavailableException&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-11-09T21:53:32.584 INFO --- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> asgi_gw_6&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> localstack.request.aws : AWS apigatewayv2.GetVpcLink &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;gt; &lt;span style="color:#0000cf;font-weight:bold">503&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>ServiceUnavailableException&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-11-09T21:53:33.271 INFO --- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> asgi_gw_9&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> localstack.request.aws : AWS ecs.DescribeClusters &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;gt; &lt;span style="color:#0000cf;font-weight:bold">503&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>ServiceUnavailableException&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-11-09T21:53:33.473 INFO --- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> asgi_gw_2&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> localstack.request.aws : AWS ecs.DescribeTaskDefinition &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;gt; &lt;span style="color:#0000cf;font-weight:bold">503&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>ServiceUnavailableException&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-11-09T21:53:33.889 INFO --- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> asgi_gw_7&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> localstack.request.aws : AWS ecs.DescribeTaskDefinition &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;gt; &lt;span style="color:#0000cf;font-weight:bold">503&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>ServiceUnavailableException&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>During infrastructure provisioning, depending on the tool and provider used, attempts may be made to reapply changes to resources following a failure, or the action might simply fail.&lt;/p>
&lt;h3 id="simulating-shutdowns">Simulating shutdowns&lt;/h3>
&lt;p>To simulate the shutdown of an entire region, execute the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>curl --location --request POST &amp;#39;http://outages.localhost.localstack.cloud:4566/outages&amp;#39; \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--header &amp;#39;Content-Type: application/json&amp;#39; \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--data-raw &amp;#39;[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;service&amp;#34;: &amp;#34;*&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;region&amp;#34;: &amp;#34;us-east-1&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]&amp;#39;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="other-operations">Other operations&lt;/h3>
&lt;p>To stop outages, submit an empty list in the configuration using the following &lt;code>POST&lt;/code> request:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>curl --location --request POST &amp;#39;http://outages.localhost.localstack.cloud:4566/outages&amp;#39; \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--header &amp;#39;Content-Type: application/json&amp;#39; \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--data-raw &amp;#39;[]&amp;#39;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>To view the current configuration, use this &lt;code>GET&lt;/code> request:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>curl --location --request GET &amp;#39;http://outages.localhost.localstack.cloud:4566/outages&amp;#39;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>To add a new service/region rule to the configuration, use a &lt;code>PATCH&lt;/code> request as shown below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>curl --location --request PATCH &amp;#39;http://outages.localhost.localstack.cloud:4566/outages&amp;#39; \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--header &amp;#39;Content-Type: application/json&amp;#39; \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--data-raw &amp;#39;[{&amp;#34;service&amp;#34;: &amp;#34;transcribe&amp;#34;, &amp;#34;region&amp;#34;: &amp;#34;us-west-1&amp;#34;}]&amp;#39;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>To remove a service/region rule from the configuration, execute a &lt;code>DELETE&lt;/code> request as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>curl --location --request DELETE &amp;#39;http://outages.localhost.localstack.cloud:4566/outages&amp;#39; \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--header &amp;#39;Content-Type: application/json&amp;#39; \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--data-raw &amp;#39;[{&amp;#34;service&amp;#34;: &amp;#34;transcribe&amp;#34;, &amp;#34;region&amp;#34;: &amp;#34;us-west-1&amp;#34;}]&amp;#39;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="conclusion">Conclusion&lt;/h3>
&lt;p>By closely watching Terraform&amp;rsquo;s responses and the status of cloud resources, you&amp;rsquo;ll learn how Terraform manages these disruptions. It&amp;rsquo;s important to note how it attempts to retry operations, whether it rolls back changes or faces partial failures, and how it logs these incidents.&lt;/p>
&lt;p>This is crucial for understanding the resilience of your infrastructure provisioning against challenging conditions. It also aids in enhancing your IaC configurations, ensuring they are more robust and effective in handling faults and errors in real-life situations.&lt;/p></description></item><item><title>Applications: AppSync GraphQL APIs for DynamoDB and RDS Aurora PostgreSQL</title><link>/applications/appsync-graphql-apis-for-dynamodb-and-rds-aurora-postgresql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/applications/appsync-graphql-apis-for-dynamodb-and-rds-aurora-postgresql/</guid><description/></item></channel></rss>