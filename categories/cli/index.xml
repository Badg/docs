<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs – CLI</title><link>/categories/cli/</link><description>Recent content in CLI on Docs</description><generator>Hugo -- gohugo.io</generator><atom:link href="/categories/cli/index.xml" rel="self" type="application/rss+xml"/><item><title>Tools: Getting started with the Cloud Pods CLI</title><link>/tools/cloud-pods/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tools/cloud-pods/getting-started/</guid><description>
&lt;p>With the LocalStack Cloud Pods command-line interface (CLI), the &lt;code>pod&lt;/code> command, you can create cloud pods and manage them from a terminal. The Cloud Pods CLI is ideal in the following situations:&lt;/p>
&lt;ul>
&lt;li>Taking a snapshot of your running LocalStack instance.&lt;/li>
&lt;li>Sharing your snapshot across teams with LocalStack Team features.&lt;/li>
&lt;li>Injecting snapshots into a running instance without a restart.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>LocalStack Cloud Pods CLI is directly available with the LocalStack installation, and no further installation is required to get started. If you are a Pro user, we recommend you to export the &lt;code>LOCALSTACK_API_KEY&lt;/code> as an environment variable to allow you to use the full spectrum of LocalStack Cloud Pods feature.&lt;/p>
&lt;p>For Community users, we recommend you to use a different remote, with public GitHub repositories being the recommended way to store your Cloud Pods data. The creation of pods (with the &lt;code>export&lt;/code> command) would require a Pro account, but the pulling and injection of public community pods (read-only) would work with Community as well.&lt;/p>
&lt;h2 id="basic-example">Basic example&lt;/h2>
&lt;p>In this tutorial, you&amp;rsquo;ll learn how to make a basic usage of LocalStack Cloud Pods CLI. This tutorial is intended for Pro users who wish to get more acquainted with Cloud Pods CLI. It assumes you have basic knowledge of:&lt;/p>
&lt;ul>
&lt;li>LocalStack&lt;/li>
&lt;li>&lt;code>awscli&lt;/code> commands&lt;/li>
&lt;li>Understanding of Cloud Pods workflow&lt;/li>
&lt;/ul>
&lt;p>By the end of this tutorial, you would be able to create a snapshot of your running LocalStack instance, commit it and would be able to push this to your LocalStack account.&lt;/p>
&lt;h3 id="procedure">Procedure&lt;/h3>
&lt;p>To get started, start your LocalStack instance with your &lt;code>LOCALSTACK_API_KEY&lt;/code> configured as an environment variable:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Use the &lt;code>awslocal&lt;/code> CLI to create AWS resources inside your running LocalStack instance.&lt;/p>
&lt;p>As an example, we will create a S3 bucket using the &lt;code>awslocal&lt;/code> CLI and enter some data inside it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal s3 mb s3://test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>echo &amp;#34;hello world&amp;#34; &amp;gt; /tmp/hello-world
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal s3 cp /tmp/hello-world s3://test/hello-world
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal s3 ls s3://test/&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/li>
&lt;li>
&lt;p>Create a Cloud Pod using the &lt;code>--name&lt;/code> flag to specify the Pod name:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack pod config --name &amp;lt;pod-name&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/li>
&lt;li>
&lt;p>Optional: You can also specify a list of services for your Cloud Pod with the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack pod config --services &amp;lt;comma-seperated-services-names&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/li>
&lt;li>
&lt;p>Commit your Pod state using the &lt;code>commit&lt;/code> command by specifying the &lt;code>--name&lt;/code> and &lt;code>--message&lt;/code> flag to specify the Pod name your created previously and the commit message associated with the change:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack pod commit --name &amp;lt;pod-name&amp;gt; --message &amp;#34;&amp;lt;commit-message&amp;gt;&amp;#34;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/li>
&lt;li>
&lt;p>Check the list of Cloud Pods on your machine using the &lt;code>list&lt;/code> command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack pod list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━┓
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ┃ local/remote ┃ Name ┃
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━┩
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ local │ pod-name │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └──────────────┴───────────┘&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/li>
&lt;li>
&lt;p>Optional: You can inspect the contents of a Cloud Pod using the &lt;code>inspect&lt;/code> command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack pod inspect --name &amp;lt;pod-name&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - 000000000000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - S3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - global
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - listBuckets
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Buckets
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Name = test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - CreationDate = 2022-10-04T17:03:47.000Z
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Owner
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - DisplayName = webfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - ID = bcaf1ffd86f41161ca5fb16fd081034f&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/li>
&lt;li>
&lt;p>Push the Cloud Pod to LocalStack&amp;rsquo;s remote storage using &lt;code>push&lt;/code> command with the &lt;code>--name&lt;/code> flag and the &lt;code>--message&lt;/code> flag:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack pod push --name &amp;lt;pod-name&amp;gt; --message &amp;#34;&amp;lt;message&amp;gt;&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Successfully pushed the current state
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Successfully registered &amp;lt;pod-name&amp;gt; with remote!&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>To publish your Cloud Pod locally, prefer using the &lt;code>--local&lt;/code> flag to publish it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>On an alternate machine, start LocalStack with the API key configured, and pull the Cloud Pod we created previously using &lt;code>pull&lt;/code> command with the &lt;code>--name&lt;/code> flag:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack pod pull --name &amp;lt;pod-name&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Done.&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Let&amp;rsquo;s check the S3 buckets in our Cloud Pod:
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal s3 ls s3://test/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2022-10-04 22:33:54 12 hello-world&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>For a more detailed manual, refer to our &lt;a href="/tools/cloud-pods/pods-cli/">command-line interface (CLI) guide&lt;/a>. To check your Pods on the LocalStack Web user-interface, navigate to &lt;a href="https://app.localstack.cloud/pods">Cloud Pods page&lt;/a>.&lt;/p></description></item><item><title>Tools: Cloud Pods CLI command reference</title><link>/tools/cloud-pods/pods-cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tools/cloud-pods/pods-cli/</guid><description>
&lt;p>This reference provides descriptions and example commands for LocalStack Cloud Pods CLI (&lt;code>pod&lt;/code>) commands.&lt;/p>
&lt;h2 id="syntax">Syntax&lt;/h2>
&lt;p>Use the following syntax to run &lt;code>localstack pod&lt;/code> commands from your terminal window:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack pod [command] [options]&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>where &lt;code>command&lt;/code> specifies the operation you want to perform with your Cloud Pods, e.g., &lt;code>pull&lt;/code> or &lt;code>push&lt;/code>, and &lt;code>options&lt;/code> specifies the optional flag.
For example, you can attach a specific message to a snapshot using the &lt;code>-m&lt;/code> option while doing a &lt;code>commit&lt;/code> operation.&lt;/p>
&lt;h2 id="configuration">Configuration&lt;/h2>
&lt;p>The CRUD commands exposed with the Cloud Pods CLI expect a &lt;code>--name &amp;lt;pod_name&amp;gt;&lt;/code> option to specify the pod&amp;rsquo;s name.
Users can avoid specifying a pod name at every command by setting a global config with the &lt;code>config&lt;/code> command.&lt;/p>
&lt;p>For instance, the following command:&lt;/p>
&lt;pre tabindex="0">&lt;code>localstack config --name my_pod
&lt;/code>&lt;/pre>&lt;p>will implicitly pass a pod name to all subsequent CLI commands.
Such a configuration will be saved locally on the host machine in a JSON file (e.g., in &lt;code>~/.localstack/cloudpods/pods-config.json&lt;/code>).&lt;/p>
&lt;h2 id="commands">Commands&lt;/h2>
&lt;h3 id="commit">commit&lt;/h3>
&lt;p>The &lt;code>commit&lt;/code> command creates a snapshot of your LocalStack running instance and locally saves it on the host machine.&lt;/p>
&lt;p>&lt;strong>Synopsis&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Commit a snapshot of the LocalStack running instance.
Options:
-m, --message TEXT Add a comment describing the snapshot.
-n, --name TEXT Name of the Cloud Pod.
-s, --services TEXT Comma-delimited list of services to push in the pods (all, by default).
&lt;/code>&lt;/pre>&lt;h3 id="config">config&lt;/h3>
&lt;p>The &lt;code>config&lt;/code> command saves some configuration values that apply to all the subsequent CLI commands.
For instance with &lt;code>localstack pod config --name &amp;lt;my_name&amp;gt;&lt;/code> users can avoid specifying a pod name for other commands like &lt;code>pull&lt;/code> or &lt;code>push&lt;/code>.
Users can specify a list of services with the following command:&lt;/p>
&lt;pre tabindex="0">&lt;code>localstack pod config --services sqs,sns
&lt;/code>&lt;/pre>&lt;p>The following CRUD operation will only take into account the selected service and not the entire LocalStack application state.&lt;/p>
&lt;p>&lt;strong>Synopsis&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Configure a set of parameters for all Cloud Pods commands.
Options:
-n, --name TEXT Name of the Cloud Pod.
-s, --services TEXT Comma-delimited list of services or `all` to enable all (default).
&lt;/code>&lt;/pre>&lt;h3 id="delete">delete&lt;/h3>
&lt;p>The &lt;code>delete&lt;/code> command let users delete their remote or local Cloud Pods.&lt;/p>
&lt;p>&lt;strong>Synopsis&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Delete a Cloud Pod.
Options:
-n, --name TEXT Name of the Cloud Pod.
-l, --local Delete only the local Cloud Pod, leaving the remote copy intact
&lt;/code>&lt;/pre>&lt;h3 id="inject">inject&lt;/h3>
&lt;p>The &lt;code>inject&lt;/code> command let users inject a specific application state, previously saved, into the application runtime.
Please note that this is a local-only operation, i.e., the injecting state must be located on the host machine (usually under &lt;code>~/.localstack/cloudpods/&amp;lt;pod_name&amp;gt;&lt;/code>).&lt;/p>
&lt;p>By default, the injecting state updates the application runtime at a service level.
By using the &lt;code>merge&lt;/code> injection strategy, the state of all services specified in the injecting state are reflected exactly in the application runtime, whilst all other active services remain unchanged.&lt;/p>
&lt;p>The &lt;code>--strategy&lt;/code> option can be used to change such default injection behaviour.
More specifically, the &lt;code>overwrite&lt;/code> strategy will ensure the application runtime is an exact instance of the injecting state, and the &lt;code>deep-merge&lt;/code> strategy will perform a fine-grain merge of the injecting state into the application runtime.&lt;/p>
&lt;p>&lt;strong>Synopsis&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Inject the state from a locally available Cloud Pod version into the application runtime.
Options:
-v, --version INTEGER Version to inject (most recent one by default).
-n, --name TEXT Name of the cloud pod.
-s, --strategy TEXT Inject strategy (merge, overwrite, deep-merge).
&lt;/code>&lt;/pre>&lt;h3 id="inspect">inspect&lt;/h3>
&lt;p>The &lt;code>inspect&lt;/code> command simply lets the user inspect the content of a Cloud Pod.&lt;/p>
&lt;p>&lt;strong>Synopsis&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Inspect the contents of a Cloud Pod.
Options:
-n, --name TEXT Name of the Cloud Pod.
-f, --format TEXT Format (curses, rich, json).
&lt;/code>&lt;/pre>&lt;h3 id="status">status&lt;/h3>
&lt;p>The &lt;code>status&lt;/code> command compiles a report of LocalStack current in-memory application runtime, or state, listing what Cloud Pod and Cloud Pod version have contributed to each AWS Service.
The set of active, or loaded, AWS Services is also given in this report so to distinguish which are not derivatives of Cloud Pod operations.&lt;/p>
&lt;p>The &lt;code>-v&lt;/code> option extends the default report to also include the sequence of state changing Cloud Pod operations, listing for each the type and affected AWS Services.&lt;/p>
&lt;p>&lt;strong>Synopsis&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Lists what Cloud Pods have contributed to each service&amp;#39;s current in-memory state.
Options:
-v, --verbose Include sequence of state changing Cloud Pod operations in the output.
-f, --format TEXT Format (curses, rich, json).
&lt;/code>&lt;/pre>&lt;h3 id="list">list&lt;/h3>
&lt;p>The &lt;code>list&lt;/code> command displays all the available Cloud Pods.
By default, it only shows the pods that have been uploaded to the platform.
The &lt;code>-l&lt;/code> option will also show the locally available pods.&lt;/p>
&lt;p>&lt;strong>Synopsis&lt;/strong>&lt;/p>
&lt;p>List all available Cloud Pods.&lt;/p>
&lt;pre tabindex="0">&lt;code>Options:
-l, --local List also locally available Cloud Pods
&lt;/code>&lt;/pre>&lt;h3 id="pull">pull&lt;/h3>
&lt;p>The &lt;code>pull&lt;/code> command retrieves the content of a Cloud Pod previously created and uploaded to the LocalStack platform and injects it into the application runtime.&lt;/p>
&lt;p>By default, the fetched pod updates the application runtime at a service level, utilising a &lt;code>merge&lt;/code> injection strategy.
Like the &lt;code>inject&lt;/code> command, the &lt;code>--strategy&lt;/code> option can change such default injection behaviour.&lt;/p>
&lt;p>&lt;strong>Synopsis&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Incorporate the state of a Cloud Pod into the application runtime.
Options:
-n, --name TEXT Name of the cloud pod
-s, --strategy TEXT Inject strategy (merge, overwrite, deep-merge).
&lt;/code>&lt;/pre>&lt;h3 id="push">push&lt;/h3>
&lt;p>The &lt;code>push&lt;/code> command is used to create a new version of a Cloud Pods and upload it to the LocalStack platform.
A new version is created from the latest snapshot, e.g., taken with a previous &lt;code>commit&lt;/code>.
A snapshot will be created at the moment of the push if no previous snapshot has been taken.
By default, a &lt;code>push&lt;/code> operation will always retrieve the application state, create a Cloud Pod, and upload a version to the platform.
Users can use the &lt;code>--local&lt;/code> flag if they wish to avoid the last step and keep the newly created pod on the host machine.
Users can also select a subset of AWS services they wish to incorporate in a new Cloud Pod version with the &lt;code>--services&lt;/code> option.
Pushing an already existing pod results in creating a new version of it and, eventually, uploading it to the platform.&lt;/p>
&lt;p>&lt;strong>Synopsis&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Create a new version of a Cloud Pod from the latest snapshot. A snapshot is created if it does not
exists yet.
Options:
-l, --local Create the Cloud Pod version only locally, without pushing to remote
-m, --message TEXT Add a comment describing the version.
-n, --name TEXT Name of the Cloud Pod.
-s, --services TEXT Comma-delimited list of services to push in the pods (all by default).
--overwrite BOOLEAN Overwrite a version with the content from the latest snapshot of the selected
version.
-v, --version INTEGER Version to overwrite. Works with `--overwrite`
&lt;/code>&lt;/pre>&lt;h3 id="versions">versions&lt;/h3>
&lt;p>The &lt;code>versions&lt;/code> command simply lists all the available versions of a Cloud Pod.&lt;/p>
&lt;p>&lt;strong>Synopsis&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>List all available versions for a Cloud Pod.
Options:
-n, --name TEXT Name of the Cloud Pod.
&lt;/code>&lt;/pre></description></item></channel></rss>