<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs â€“ LocalStack</title><link>/categories/localstack/</link><description>Recent content in LocalStack on Docs</description><generator>Hugo -- gohugo.io</generator><atom:link href="/categories/localstack/index.xml" rel="self" type="application/rss+xml"/><item><title>References: Credentials</title><link>/references/credentials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/credentials/</guid><description>
&lt;p>Like AWS, LocalStack requires access key IDs to be set in all operations.
The choice of access key ID will affect &lt;a href="/references/multi-account-setups/">multi-account namespacing&lt;/a>.
Values of secret access keys are currently ignored by LocalStack.&lt;/p>
&lt;p>Access key IDs can be one of following patterns:&lt;/p>
&lt;h3 id="accounts-ids">Accounts IDs&lt;/h3>
&lt;p>You can specify a 12-digit number which will be taken by LocalStack as the account ID.
For example, &lt;code>112233445566&lt;/code>.&lt;/p>
&lt;h3 id="structured-access-key-id">Structured access key ID&lt;/h3>
&lt;p>You can specify a structured key like &lt;code>LSIAQAAAAAAVNCBMPNSG&lt;/code> (which translates to account ID &lt;code>000000000042&lt;/code>).
This must be at least 20 characters in length and must be decodable to an account ID.&lt;/p>
&lt;p>By default, LocalStack will only accept access keys that start with the &lt;code>LSIA...&lt;/code> or &lt;code>LKIA...&lt;/code> prefix.
If keys with &lt;code>ASIA...&lt;/code>/&lt;code>AKIA...&lt;/code> prefix are provided, these are rejected and the fallback account ID &lt;code>000000000000&lt;/code> is used.
This is a safeguard to prevent misuse of production AWS access key IDs.
To disable this safeguard, set the &lt;code>PARITY_AWS_ACCESS_KEY_ID&lt;/code> configuration variable.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Warning&lt;/h4>
Disabling the access key safeguard and using production access key IDs may cause accidental connections to AWS.
We strongly recommend leaving it on.
&lt;/div>
&lt;h3 id="alphanumeric-string">Alphanumeric string&lt;/h3>
&lt;p>You can also specify an arbitrary alphanumeric access key ID like &lt;code>test&lt;/code> or &lt;code>foobar123&lt;/code>.
In all such cases, the account ID will be evalutated to &lt;code>000000000000&lt;/code>.&lt;/p></description></item><item><title>References: Cross-Account and Cross-Region Access</title><link>/references/cross-account-access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/cross-account-access/</guid><description>
&lt;p>LocalStack automatically namespaces all resources based on the account ID and, in some cases, the region.
However, there are certain resource types that can be accessed across multiple accounts or regions.
This document provides information to help design such setups.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Cross-account support in LocalStack is being actively developed.
Please report any issues on our &lt;a href="https://github.com/localstack/localstack/issues/new/choose">GitHub issue tracker&lt;/a>.
&lt;/div>
&lt;h2 id="cross-account">Cross-Account&lt;/h2>
&lt;p>Resources that can be accessed across multiple accounts are always identified by their Amazon Resource Names (ARNs).
The full list of resources and operations that allow cross-account access are listed below.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
LocalStack does not enforce IAM for cross-account access by default.
Use the &lt;code>ENFORCE_IAM&lt;/code> &lt;a href="/references/configuration/#iam">configuration&lt;/a> option to enable it.
&lt;/div>
&lt;h3 id="ec2-peering">EC2 Peering&lt;/h3>
&lt;p>It is possible to create peered VPCs and transit gateway peering attachments that are in a different region or account than the requester.
Ensure that the &lt;code>PeerRegion&lt;/code> and &lt;code>PeerOwnerId&lt;/code> arguments are correctly set when creating these resources.&lt;/p>
&lt;h3 id="kms-keys">KMS keys&lt;/h3>
&lt;ul>
&lt;li>&lt;code>CreateGrant&lt;/code>&lt;/li>
&lt;li>&lt;code>Decrypt&lt;/code>&lt;/li>
&lt;li>&lt;code>DescribeKey&lt;/code>&lt;/li>
&lt;li>&lt;code>Encrypt&lt;/code>&lt;/li>
&lt;li>&lt;code>GenerateDataKey&lt;/code>&lt;/li>
&lt;li>&lt;code>GenerateDataKeyPair&lt;/code>&lt;/li>
&lt;li>&lt;code>GenerateDataKeyPairWithoutPlaintext&lt;/code>&lt;/li>
&lt;li>&lt;code>GenerateDataKeyWithoutPlaintext&lt;/code>&lt;/li>
&lt;li>&lt;code>GenerateMac&lt;/code>&lt;/li>
&lt;li>&lt;code>GetKeyRotationStatus&lt;/code>&lt;/li>
&lt;li>&lt;code>GetPublicKey&lt;/code>&lt;/li>
&lt;li>&lt;code>ListGrants&lt;/code>&lt;/li>
&lt;li>&lt;code>RetireGrant&lt;/code>&lt;/li>
&lt;li>&lt;code>RevokeGrant&lt;/code>&lt;/li>
&lt;li>&lt;code>Sign&lt;/code>&lt;/li>
&lt;li>&lt;code>Verify&lt;/code>&lt;/li>
&lt;li>&lt;code>VerifyMac&lt;/code>&lt;/li>
&lt;/ul>
&lt;!-- - ReEncrypt (NOT IMPLEMENTED IN LOCALSTACK) -->
&lt;h3 id="lambda-functions-and-layers">Lambda functions and layers&lt;/h3>
&lt;ul>
&lt;li>&lt;code>AddLayerVersionPermission&lt;/code>&lt;/li>
&lt;li>&lt;code>CreateAlias&lt;/code>&lt;/li>
&lt;li>&lt;code>DeleteAlias&lt;/code>&lt;/li>
&lt;li>&lt;code>DeleteFunction&lt;/code>&lt;/li>
&lt;li>&lt;code>DeleteFunctionConcurrency&lt;/code>&lt;/li>
&lt;li>&lt;code>DeleteLayerVersion&lt;/code>&lt;/li>
&lt;li>&lt;code>GetAlias&lt;/code>&lt;/li>
&lt;li>&lt;code>GetFunction&lt;/code>&lt;/li>
&lt;li>&lt;code>GetFunctionConfiguration&lt;/code>&lt;/li>
&lt;li>&lt;code>GetLayerVersion&lt;/code>&lt;/li>
&lt;li>&lt;code>GetLayerVersionByArn&lt;/code>&lt;/li>
&lt;li>&lt;code>GetLayerVersionPolicy&lt;/code>&lt;/li>
&lt;li>&lt;code>GetPolicy&lt;/code>&lt;/li>
&lt;li>&lt;code>Invoke&lt;/code>&lt;/li>
&lt;li>&lt;code>ListAliases&lt;/code>&lt;/li>
&lt;li>&lt;code>ListLayerVersions&lt;/code>&lt;/li>
&lt;li>&lt;code>ListTags&lt;/code>&lt;/li>
&lt;li>&lt;code>ListVersionsByFunction&lt;/code>&lt;/li>
&lt;li>&lt;code>PublishVersion&lt;/code>&lt;/li>
&lt;li>&lt;code>PutFunctionConcurrency&lt;/code>&lt;/li>
&lt;li>&lt;code>RemoveLayerVersionPermission&lt;/code>&lt;/li>
&lt;li>&lt;code>TagResource&lt;/code>&lt;/li>
&lt;li>&lt;code>UntagResource&lt;/code>&lt;/li>
&lt;li>&lt;code>UpdateAlias&lt;/code>&lt;/li>
&lt;li>&lt;code>UpdateFunctionCode&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="s3-buckets">S3 buckets&lt;/h3>
&lt;p>Like AWS, LocalStack S3 has a bucket namespace which is shared by all accounts.
This means that the bucket name has to be globally unique.&lt;/p>
&lt;ul>
&lt;li>&lt;code>GetObject&lt;/code>&lt;/li>
&lt;li>&lt;code>ListObjects&lt;/code>&lt;/li>
&lt;li>&lt;code>PutObject&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="sns-topics">SNS topics&lt;/h3>
&lt;ul>
&lt;li>&lt;code>AddPermission&lt;/code>&lt;/li>
&lt;li>&lt;code>DeleteTopic&lt;/code>&lt;/li>
&lt;li>&lt;code>GetTopicAttributes&lt;/code>&lt;/li>
&lt;li>&lt;code>ListSubscriptionByTopic&lt;/code>&lt;/li>
&lt;li>&lt;code>Publish&lt;/code>&lt;/li>
&lt;li>&lt;code>RemovePermission&lt;/code>&lt;/li>
&lt;li>&lt;code>SetTopicAttributes&lt;/code>&lt;/li>
&lt;li>&lt;code>Subscribe&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="sqs-queues">SQS queues&lt;/h3>
&lt;p>On AWS, all operations except &lt;code>AddPermission&lt;/code>, &lt;code>CreateQueue&lt;/code>, &lt;code>DeleteQueue&lt;/code>, &lt;code>ListQueues&lt;/code>, &lt;code>ListQueueTags&lt;/code>, &lt;code>RemovePermission&lt;/code>, &lt;code>SetQueueAttributes&lt;/code>, &lt;code>TagQueue&lt;/code> and &lt;code>UntagQueue&lt;/code> allow cross-account access.&lt;/p>
&lt;p>On LocalStack, all operations allow cross-account access.&lt;/p>
&lt;h2 id="cross-region">Cross-Region&lt;/h2>
&lt;p>AWS provides individual API endpoints for each region, and typically, resources can only be accessed within their respective regions.&lt;/p>
&lt;p>On the other hand, LocalStack operates on a unified API endpoint, allowing interactions with services across regions.&lt;/p></description></item></channel></rss>